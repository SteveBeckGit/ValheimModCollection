[Message:   BepInEx] BepInEx 5.4.21.0 - valheim (01/04/2023 15:08:30)
[Info   :   BepInEx] Running under Unity v2020.3.45.6687953
[Info   :   BepInEx] CLR runtime version: 4.0.30319.42000
[Info   :   BepInEx] Supports SRE: True
[Info   :   BepInEx] System platform: Bits64, Windows
[Message:   BepInEx] Preloader started
[Info   :   BepInEx] Loaded 1 patcher method from [BepInEx.Preloader 5.4.21.0]
[Info   :   BepInEx] Loaded 1 patcher method from [SlimVML.Loader 1.1.0.0]
[Info   :   BepInEx] 2 patcher plugins loaded
[Info   :   BepInEx] Patching [UnityEngine.CoreModule] with [BepInEx.Chainloader]
[Info   :   SlimVML] Loading DLLs from C:\Program Files (x86)\Steam\steamapps\common\Valheim\InSlimVML\Mods
[Warning:   SlimVML] Skipping 0Harmony.dll since it's in ignore list
[Info   :   SlimVML] Invoking static void SlimAssist.SlimAssist::Main(string[] args)
[Message:   BepInEx] Preloader finished
[Message:   BepInEx] Chainloader ready
[Message:   BepInEx] Chainloader started
[Info   :   BepInEx] 14 plugins to load
[Warning:   BepInEx] Plugin [FoodDurationMultiplier 1.1.0] targets a wrong version of BepInEx (5.4.22.0) and might not work until you update
[Warning:   BepInEx] Plugin [Jotunn 2.14.3] targets a wrong version of BepInEx (5.4.22.0) and might not work until you update
[Info   :   BepInEx] Loading [Craft From Containers 3.5.0]
[Info   :  HarmonyX] Created Harmony instance id=harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd, version=2.0.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony20.dll - Started from System.Void HarmonyLib.Tools.Logger::Log(HarmonyLib.Tools.Logger+LogChannel,System.Func`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]],System.Boolean) location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Void FejdStartup::Awake()
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void CraftFromContainers.BepInExPlugin+FejdStartup_Awake_Patch::Postfix(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 16ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Void Container::Awake()
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching void Container::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void CraftFromContainers.BepInExPlugin+Container_Awake_Patch::Postfix(Container __instance, ZNetView ___m_nview)

[Info   :  HarmonyX] Running ILHook manipulator on void Container::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 12ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Void Container::OnDestroyed()
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching void Container::OnDestroyed() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void CraftFromContainers.BepInExPlugin+Container_OnDestroyed_Patch::Prefix(Container __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Container::OnDestroyed()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 7ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Void InventoryGui::Update()
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching void InventoryGui::Update() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void CraftFromContainers.BepInExPlugin+InventoryGui_Update_Patch::Prefix(InventoryGui __instance, UnityEngine.Animator ___m_animator)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::Update()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 11ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Boolean Fireplace::Interact(Humanoid,System.Boolean,System.Boolean)
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching virtual bool Fireplace::Interact(Humanoid user, bool hold, bool alt) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool CraftFromContainers.BepInExPlugin+Fireplace_Interact_Patch::Prefix(Fireplace __instance, Humanoid user, bool hold, Boolean& __result, ZNetView ___m_nview)

[Info   :  HarmonyX] Running ILHook manipulator on virtual bool Fireplace::Interact(Humanoid user, bool hold, bool alt)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 10ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Boolean CookingStation::OnAddFuelSwitch(Switch,Humanoid,ItemDrop+ItemData)
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching bool CookingStation::OnAddFuelSwitch(Switch sw, Humanoid user, ItemDrop+ItemData item) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool CraftFromContainers.BepInExPlugin+CookingStation_OnAddFuelSwitch_Patch::Prefix(CookingStation __instance, Boolean& __result, Humanoid user, ItemDrop+ItemData item, ZNetView ___m_nview)

[Info   :  HarmonyX] Running ILHook manipulator on bool CookingStation::OnAddFuelSwitch(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 5ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching ItemDrop+ItemData CookingStation::FindCookableItem(Inventory)
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching ItemDrop+ItemData CookingStation::FindCookableItem(Inventory inventory) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void CraftFromContainers.BepInExPlugin+CookingStation_FindCookableItem_Patch::Postfix(CookingStation __instance, ItemDrop+ItemData& __result)

[Info   :  HarmonyX] Running ILHook manipulator on ItemDrop+ItemData CookingStation::FindCookableItem(Inventory inventory)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 6ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.String Smelter::OnHoverAddFuel()
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching string Smelter::OnHoverAddFuel() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void CraftFromContainers.BepInExPlugin+Smelter_OnHoverAddFuel_Patch::Postfix(Smelter __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string Smelter::OnHoverAddFuel()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 4ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.String Smelter::OnHoverAddOre()
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching string Smelter::OnHoverAddOre() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void CraftFromContainers.BepInExPlugin+Smelter_OnHoverAddOre_Patch::Postfix(Smelter __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string Smelter::OnHoverAddOre()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 7ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Boolean Smelter::OnAddOre(Switch,Humanoid,ItemDrop+ItemData)
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching bool Smelter::OnAddOre(Switch sw, Humanoid user, ItemDrop+ItemData item) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool CraftFromContainers.BepInExPlugin+Smelter_OnAddOre_Patch::Prefix(Smelter __instance, Humanoid user, ItemDrop+ItemData item, ZNetView ___m_nview)

[Info   :  HarmonyX] Running ILHook manipulator on bool Smelter::OnAddOre(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 5ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Boolean Smelter::OnAddFuel(Switch,Humanoid,ItemDrop+ItemData)
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching bool Smelter::OnAddFuel(Switch sw, Humanoid user, ItemDrop+ItemData item) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool CraftFromContainers.BepInExPlugin+Smelter_OnAddFuel_Patch::Prefix(Smelter __instance, Boolean& __result, ZNetView ___m_nview, Humanoid user, ItemDrop+ItemData item)

[Info   :  HarmonyX] Running ILHook manipulator on bool Smelter::OnAddFuel(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 4ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Boolean InventoryGui::SetupRequirement(UnityEngine.Transform,Piece+Requirement,Player,System.Boolean,System.Int32)
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching static bool InventoryGui::SetupRequirement(UnityEngine.Transform elementRoot, Piece+Requirement req, Player player, bool craft, int quality) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void CraftFromContainers.BepInExPlugin+InventoryGui_SetupRequirement_Patch::Postfix(InventoryGui __instance, UnityEngine.Transform elementRoot, Piece+Requirement req, Player player, bool craft, int quality)

[Info   :  HarmonyX] Running ILHook manipulator on static bool InventoryGui::SetupRequirement(UnityEngine.Transform elementRoot, Piece+Requirement req, Player player, bool craft, int quality)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 8ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Boolean Player::HaveRequirementItems(Recipe,System.Boolean,System.Int32)
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching bool Player::HaveRequirementItems(Recipe piece, bool discover, int qualityLevel) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void CraftFromContainers.BepInExPlugin+HaveRequirementItems_Patch::Postfix(Player __instance, Boolean& __result, Recipe piece, bool discover, int qualityLevel, System.Collections.Generic.HashSet<string> ___m_knownMaterial)

[Info   :  HarmonyX] Running ILHook manipulator on bool Player::HaveRequirementItems(Recipe piece, bool discover, int qualityLevel)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 6ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Void Player::UpdateKnownRecipesList()
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching void Player::UpdateKnownRecipesList() with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void CraftFromContainers.BepInExPlugin+UpdateKnownRecipesList_Patch::Prefix()
1 postfixes:
* static void CraftFromContainers.BepInExPlugin+UpdateKnownRecipesList_Patch::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void Player::UpdateKnownRecipesList()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 9ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Boolean Player::HaveRequirements(Piece,Player+RequirementMode)
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching bool Player::HaveRequirements(Piece piece, Player+RequirementMode mode) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void CraftFromContainers.BepInExPlugin+HaveRequirements_Patch::Postfix(Player __instance, Boolean& __result, Piece piece, Player+RequirementMode mode, System.Collections.Generic.HashSet<string> ___m_knownMaterial, System.Collections.Generic.Dictionary<string, int> ___m_knownStations)

[Info   :  HarmonyX] Running ILHook manipulator on bool Player::HaveRequirements(Piece piece, Player+RequirementMode mode)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 6ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Void Player::ConsumeResources(Piece+Requirement[],System.Int32,System.Int32)
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching void Player::ConsumeResources(Piece+Requirement[] requirements, int qualityLevel, int itemQuality) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool CraftFromContainers.BepInExPlugin+ConsumeResources_Patch::Prefix(Player __instance, Piece+Requirement[] requirements, int qualityLevel)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::ConsumeResources(Piece+Requirement[] requirements, int qualityLevel, int itemQuality)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 4ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Void Player::UpdatePlacementGhost(System.Boolean)
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching void Player::UpdatePlacementGhost(bool flashGuardStone) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void CraftFromContainers.BepInExPlugin+UpdatePlacementGhost_Patch::Postfix(Player __instance, bool flashGuardStone)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::UpdatePlacementGhost(bool flashGuardStone)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 25ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Void InventoryGui::OnCraftPressed()
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching void InventoryGui::OnCraftPressed() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool CraftFromContainers.BepInExPlugin+DoCrafting_Patch::Prefix(InventoryGui __instance, System.Collections.Generic.KeyValuePair<Recipe, ItemDrop+ItemData> ___m_selectedRecipe, ItemDrop+ItemData ___m_craftUpgradeItem)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::OnCraftPressed()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 5ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Void Player::UpdatePlacement(System.Boolean,System.Single)
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching void Player::UpdatePlacement(bool takeInput, float dt) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool CraftFromContainers.BepInExPlugin+UpdatePlacement_Patch::Prefix(Player __instance, bool takeInput, float dt, PieceTable ___m_buildPieces, UnityEngine.GameObject ___m_placementGhost)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::UpdatePlacement(bool takeInput, float dt)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 19ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Boolean Turret::UseItem(Humanoid,ItemDrop+ItemData)
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching virtual bool Turret::UseItem(Humanoid user, ItemDrop+ItemData item) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void CraftFromContainers.BepInExPlugin+Turret_UseItem_Patch::Prefix(Turret __instance, Humanoid user, ItemDrop+ItemData& item)

[Info   :  HarmonyX] Running ILHook manipulator on virtual bool Turret::UseItem(Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 10ms
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd...
[Info   :  HarmonyX] Patching System.Void Terminal::InputText()
[Info   :  HarmonyX] HarmonyPrepare result: True
[Info   :  HarmonyX] Patching virtual void Terminal::InputText() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool CraftFromContainers.BepInExPlugin+InputText_Patch::Prefix(Terminal __instance)

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Terminal::InputText()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching harmony-auto-ad6db9fc-4a7e-4078-a248-25fff3ae2bcd took 5ms
[Debug  :Craft From Containers] CraftFromContainers Mod awake
[Info   :   BepInEx] Loading [FoodDurationMultiplier 1.1.0]
[Info   :  HarmonyX] ### Harmony id=blacks7ar.FoodDurationMultiplier, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void FoodDurationMultiplier.Plugin::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\FoodDurationMultiplier.dll
### At 2023-10-07 07.35.08
[Info   :  HarmonyX] Patching void Hud::UpdateFood(Player player) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void FoodDurationMultiplier.Patches.HudPatch::UpdateFood_Prefix(Player+Food& player)

[Info   :  HarmonyX] Running ILHook manipulator on void Hud::UpdateFood(Player player)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching bool Player::EatFood(ItemDrop+ItemData item) with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> FoodDurationMultiplier.Patches.PlayerPatch+EatFoodPatch::Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on bool Player::EatFood(ItemDrop+ItemData item)
[Info   :  HarmonyX] Transpiling bool Player::EatFood(ItemDrop+ItemData item)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> FoodDurationMultiplier.Patches.PlayerPatch+EatFoodPatch::Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void Player::GetTotalFoodValue(Single& hp, Single& stamina, Single& eitr) with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> FoodDurationMultiplier.Patches.PlayerPatch+GetTotalFoodValuePatch::Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::GetTotalFoodValue(Single& hp, Single& stamina, Single& eitr)
[Info   :  HarmonyX] Transpiling void Player::GetTotalFoodValue(Single& hp, Single& stamina, Single& eitr)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> FoodDurationMultiplier.Patches.PlayerPatch+GetTotalFoodValuePatch::Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void ZRpc::HandlePackage(ZPackage package) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZRpc::HandlePackage(ZPackage package)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Shutdown(bool save) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Shutdown(bool save)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
1 postfixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 2 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
1 postfixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
1 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :   BepInEx] Loading [Configuration Manager 17.1]
[Info   :   BepInEx] Loading [Jotunn 2.14.3]
[Info   :  HarmonyX] ### Harmony id=com.jotunn.jotunn, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void Jotunn.Main::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\Jotunn\Jotunn.dll
### At 2023-10-07 07.35.08
[Info   :Jotunn.Main] Initializing ModCompatibility
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 2 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
1 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_ClientHandshake(ZRpc rpc, bool needPassword, string serverPasswordSalt) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_RPC_ClientHandshake(ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_ClientHandshake(ZRpc rpc, bool needPassword, string serverPasswordSalt)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_ServerHandshake(ZRpc rpc) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_RPC_ServerHandshake(ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_ServerHandshake(ZRpc rpc)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void Jotunn.Utils.ModCompatibility::FejdStartup_ShowConnectError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::SendPeerInfo(ZRpc rpc, string password) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool Jotunn.Utils.ModCompatibility::ZNet_SendPeerInfo(ZNet __instance, ZRpc rpc, string password)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::SendPeerInfo(ZRpc rpc, string password)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 3 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
1 postfixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :Jotunn.Main] Initializing SynchronizationManager
[Info   :Jotunn.Main] Initializing NetworkManager
[Info   :  HarmonyX] Patching void Game::Start() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.NetworkManager+Patches::Game_Start()

[Info   :  HarmonyX] Running ILHook manipulator on void Game::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_Awake(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 4 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
2 postfixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void SyncedList::Load() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::SyncedList_Load(SyncedList __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void SyncedList::Load()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void SyncedList::Save() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::SyncedList_Save(SyncedList __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void SyncedList::Save()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching static bool Menu::IsVisible() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::Menu_IsVisible(Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on static bool Menu::IsVisible()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::FejdStartup_Awake()
1 postfixes:
* static void CraftFromContainers.BepInExPlugin+FejdStartup_Awake_Patch::Postfix(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Debug  :Jotunn.Managers.SynchronizationManager] Configuration manager found, trying to hook DisplayingWindowChanged
[Info   :   BepInEx] Loading [EnhancedBosses 2.0.0]
[Info   :  HarmonyX] ### Harmony id=blumaye.enhancedbosses, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void EnhancedBosses.Main::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\EnhancedBosses\EnhancedBosses.dll
### At 2023-10-07 07.35.08
[Info   :  HarmonyX] Patching void FejdStartup::Start() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void SlimAssist.SlimAssist+Start_Patch::Postfix(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :Jotunn.Main] Initializing PrefabManager
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable(ObjectDB other)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :Jotunn.Main] Initializing ItemManager
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 2 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable(ObjectDB other)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
1 postfixes:
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
1 postfixes:
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Player::OnSpawned() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.ItemManager+Patches::ReloadKnownRecipes(Player __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::OnSpawned()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Attack::OnAttackTrigger() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool EnhancedBosses.Attack_OnAttackTrigger+Attack_OnAttackTrigger_Prefix::Prefix(Attack __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Attack::OnAttackTrigger()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching bool BaseAI::CanUseAttack(ItemDrop+ItemData item) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void EnhancedBosses.BaseAI_CanUseAttack+BaseAI_CanUseAttack_Postfix::Postfix(BaseAI __instance, ItemDrop+ItemData item, Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool BaseAI::CanUseAttack(ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool EnemyHud::TestShow(Character c, bool isVisible) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void EnhancedBosses.EnemyHud_TestShow+EnemyHud_TestShow_Postfix::Postfix(Character& c, Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool EnemyHud::TestShow(Character c, bool isVisible)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Minimap::UpdateEventPin(float dt) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void EnhancedBosses.Minimap_UpdateEventPin+UpdateEventMobMinimapPinsPatch::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void Minimap::UpdateEventPin(float dt)
[Info   :  HarmonyX] Writing postfixes
[Info   :   BepInEx] Loading [Use Equipment in Water 0.2.4]
[Info   :  HarmonyX] ### Harmony id=harmony-auto-1444efe6-95b7-4836-a2ef-3a17fea5a2d9, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void Use_Equipment_in_Water.UseEquipmentInWater::Awake(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\UseEquipmentInWater.dll
### At 2023-10-07 07.35.08
[Info   :  HarmonyX] Patching bool Character::IsSwimming() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool Use_Equipment_in_Water.UseEquipmentInWater::patchIsSwim(Boolean& __result, Humanoid __instance, float ___m_swimTimer)

[Info   :  HarmonyX] Running ILHook manipulator on bool Character::IsSwimming()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching bool Humanoid::EquipItem(ItemDrop+ItemData item, bool triggerEquipEffects) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Use_Equipment_in_Water.UseEquipmentInWater::patchEquipItem()

[Info   :  HarmonyX] Running ILHook manipulator on bool Humanoid::EquipItem(ItemDrop+ItemData item, bool triggerEquipEffects)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Humanoid::UpdateEquipment(float dt) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Use_Equipment_in_Water.UseEquipmentInWater::patchUpdateEquipment()

[Info   :  HarmonyX] Running ILHook manipulator on void Humanoid::UpdateEquipment(float dt)
[Info   :  HarmonyX] Writing prefixes
[Info   :   BepInEx] Loading [BlacksmithTools 2.0.1]
[Info   :  HarmonyX] ### Harmony id=GoldenJude_BlacksmithTools, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void BlacksmithTools.Main::.ctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\BlacksmithTools.dll
### At 2023-10-07 07.35.08
[Info   :   BepInEx] Loading [Hitbox Fix 1.3.0]
[Info   :  HarmonyX] ### Harmony id=hitbox.fix, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void Hitbox_Fix.HitboxFix::.ctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\HitboxFix.dll
### At 2023-10-07 07.35.08
[Info   :  HarmonyX] Patching void Attack::DoMeleeAttack() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Hitbox_Fix.HitboxFix+Hitbox_Patch::Prefix(Single& ___m_maxYAngle, Single& ___m_attackOffset, Single& ___m_attackHeight)

[Info   :  HarmonyX] Running ILHook manipulator on void Attack::DoMeleeAttack()
[Info   :  HarmonyX] Writing prefixes
[Info   :   BepInEx] Loading [OdinShip 0.3.6]
[Info   :  HarmonyX] ### Harmony id=marlthon.OdinShip, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static HarmonyLib.Harmony OdinShip.OdinShipPlugin::‌⁯⁯‏‭⁭⁮‪‬‮⁪⁫‭⁪​‍​‏‪⁬‍⁯‮‫⁯‬⁫‍⁮‏‎​⁯‬​‭⁪​​‮‮(string ), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\OdinShip\OdinShip.dll
### At 2023-10-07 07.35.08
[Info   :  HarmonyX] ### Harmony id=org.bepinex.helpers.PieceManager, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void PieceManager.PiecePrefabManager::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\OdinShip\OdinShip.dll
### At 2023-10-07 07.35.08
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 2 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::FejdStartup_Awake()
* static void PieceManager.BuildPiece::Patch_FejdStartup(FejdStartup __instance)
1 postfixes:
* static void CraftFromContainers.BepInExPlugin+FejdStartup_Awake_Patch::Postfix(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::LoadCSV(UnityEngine.TextAsset file, string language) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void PieceManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::LoadCSV(UnityEngine.TextAsset file, string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::SetupLanguage(string language) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void PieceManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::SetupLanguage(string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 1 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
2 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 1 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
3 postfixes:
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 2 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable(ObjectDB other)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
2 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void PieceManager.AdminSyncing::AdminStatusSync(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_Awake(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 1 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
2 postfixes:
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 1 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
3 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void PieceTable::PrevCategory() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_PieceTable_PrevCategory(PieceTable __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::PrevCategory()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void PieceTable::PrevCategory() with 0 prefixes, 1 postfixes, 1 transpilers, 0 finalizers
1 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_PieceTable_PrevCategory(PieceTable __instance)
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> PieceManager.PiecePrefabManager::PrevCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::PrevCategory()
[Info   :  HarmonyX] Transpiling void PieceTable::PrevCategory()
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> PieceManager.PiecePrefabManager::PrevCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void PieceTable::NextCategory() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_PieceTable_NextCategory(PieceTable __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::NextCategory()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void PieceTable::NextCategory() with 0 prefixes, 1 postfixes, 1 transpilers, 0 finalizers
1 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_PieceTable_NextCategory(PieceTable __instance)
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> PieceManager.PiecePrefabManager::NextCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::NextCategory()
[Info   :  HarmonyX] Transpiling void PieceTable::NextCategory()
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> PieceManager.PiecePrefabManager::NextCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void PieceTable::SetCategory(int index) with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> PieceManager.PiecePrefabManager::SetCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::SetCategory(int index)
[Info   :  HarmonyX] Transpiling void PieceTable::SetCategory(int index)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> PieceManager.PiecePrefabManager::SetCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost) with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> PieceManager.PiecePrefabManager::UpdateAvailable_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost)
[Info   :  HarmonyX] Transpiling void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> PieceManager.PiecePrefabManager::UpdateAvailable_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost) with 1 prefixes, 1 postfixes, 1 transpilers, 0 finalizers
1 prefixes:
* static void PieceManager.PiecePrefabManager::UpdateAvailable_Prefix(PieceTable __instance)
1 postfixes:
* static void PieceManager.PiecePrefabManager::UpdateAvailable_Postfix(PieceTable __instance)
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> PieceManager.PiecePrefabManager::UpdateAvailable_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost)
[Info   :  HarmonyX] Transpiling void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> PieceManager.PiecePrefabManager::UpdateAvailable_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual void Player::SetPlaceMode(PieceTable buildPieces) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_SetPlaceMode(Player __instance)

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Player::SetPlaceMode(PieceTable buildPieces)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Hud::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void PieceManager.PiecePrefabManager::Hud_AwakeCreateTabs()

[Info   :  HarmonyX] Running ILHook manipulator on void Hud::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching static Array Enum::GetValues(Type enumType) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void PieceManager.PiecePrefabManager::EnumGetValuesPatch(Type enumType, Array& __result)

[Info   :  HarmonyX] Running ILHook manipulator on static Array Enum::GetValues(Type enumType)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching static string[] Enum::GetNames(Type enumType) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void PieceManager.PiecePrefabManager::EnumGetNamesPatch(Type enumType, String[]& __result)

[Info   :  HarmonyX] Running ILHook manipulator on static string[] Enum::GetNames(Type enumType)
[Info   :  HarmonyX] Writing postfixes
[Info   : Unity Log] 10/07/2023 07:35:10: Loaded localization file #0 - 'localization' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:10: Loaded localization file #1 - 'localization_extra' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:10: Loaded localization file #2 - 'heightmap_message' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:10: Loaded localization file #3 - 'localization_hildir' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:10: Loaded localization file #4 - 'localization_emotes' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:10: Loaded localization file #0 - 'localization' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:10: Loaded localization file #1 - 'localization_extra' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:10: Loaded localization file #2 - 'heightmap_message' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:10: Loaded localization file #3 - 'localization_hildir' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:10: Loaded localization file #4 - 'localization_emotes' language: 'English'

[Info   :  HarmonyX] ### Harmony id=org.bepinex.helpers.PieceManager, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void PieceManager.MaterialReplacer::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\OdinShip\OdinShip.dll
### At 2023-10-07 07.35.10
[Info   :  HarmonyX] Patching void ZoneSystem::Start() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void PieceManager.MaterialReplacer::ReplaceAllMaterialsWithOriginal()

[Info   :  HarmonyX] Running ILHook manipulator on void ZoneSystem::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] ### Harmony id=org.bepinex.helpers.ItemManager, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void ItemManager.PrefabManager::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\OdinShip\OdinShip.dll
### At 2023-10-07 07.35.11
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 2 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable(ObjectDB other)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
3 postfixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 2 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
3 postfixes:
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 3 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable(ObjectDB other)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
3 postfixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 3 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
3 postfixes:
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 3 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::FejdStartup_Awake()
* static void PieceManager.BuildPiece::Patch_FejdStartup(FejdStartup __instance)
* static void ItemManager.Item::Patch_FejdStartup()
1 postfixes:
* static void CraftFromContainers.BepInExPlugin+FejdStartup_Awake_Patch::Postfix(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 1 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
4 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 2 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
4 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void InventoryGui::UpdateRecipe(Player player, float dt) with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_InventoryGui(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::UpdateRecipe(Player player, float dt)
[Info   :  HarmonyX] Transpiling void InventoryGui::UpdateRecipe(Player player, float dt)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_InventoryGui(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void InventoryGui::SetupRequirementList(int quality, Player player, bool allowedQuality) with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_SetupRequirementList(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructionsEnumerable, System.Reflection.Emit.ILGenerator ilg)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::SetupRequirementList(int quality, Player player, bool allowedQuality)
[Info   :  HarmonyX] Transpiling void InventoryGui::SetupRequirementList(int quality, Player player, bool allowedQuality)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_SetupRequirementList(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructionsEnumerable, System.Reflection.Emit.ILGenerator ilg)
[Info   :  HarmonyX] Patching int Piece+Requirement::GetAmount(int qualityLevel) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool ItemManager.Item::Patch_RequirementGetAmount(Piece+Requirement __instance, int qualityLevel, Int32& __result)

[Info   :  HarmonyX] Running ILHook manipulator on int Piece+Requirement::GetAmount(int qualityLevel)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available) with 1 prefixes, 0 postfixes, 0 transpilers, 1 finalizers
1 prefixes:
* static void ItemManager.Item::Patch_GetAvailableRecipesPrefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Collections.Generic.Dictionary`2[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null],[BepInEx.Configuration.ConfigEntryBase, BepInEx, Version=5.4.21.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]& __state)
1 finalizers:
* static void ItemManager.Item::Patch_GetAvailableRecipesFinalizer(System.Collections.Generic.Dictionary<System.Reflection.Assembly, System.Collections.Generic.Dictionary<Recipe, BepInEx.Configuration.ConfigEntryBase>> __state)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing finalizers
[Info   :  HarmonyX] Patching int Recipe::GetRequiredStationLevel(int quality) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ItemManager.Item::Patch_MaximumRequiredStationLevel(Recipe __instance, Int32& __result, int quality)

[Info   :  HarmonyX] Running ILHook manipulator on int Recipe::GetRequiredStationLevel(int quality)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Smelter::OnAddFuel(Switch sw, Humanoid user, ItemDrop+ItemData item) with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool CraftFromContainers.BepInExPlugin+Smelter_OnAddFuel_Patch::Prefix(Smelter __instance, Boolean& __result, ZNetView ___m_nview, Humanoid user, ItemDrop+ItemData item)
1 postfixes:
* static void ItemManager.Item::Patch_OnAddSmelterInput(ItemDrop+ItemData item, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool Smelter::OnAddFuel(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Smelter::OnAddOre(Switch sw, Humanoid user, ItemDrop+ItemData item) with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool CraftFromContainers.BepInExPlugin+Smelter_OnAddOre_Patch::Prefix(Smelter __instance, Humanoid user, ItemDrop+ItemData item, ZNetView ___m_nview)
1 postfixes:
* static void ItemManager.Item::Patch_OnAddSmelterInput(ItemDrop+ItemData item, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool Smelter::OnAddOre(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching System.Collections.Generic.List<Trader+TradeItem> Trader::GetAvailableItems() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ItemManager.Item::Patch_TraderGetAvailableItems(Trader __instance, System.Collections.Generic.List`1[[Trader+TradeItem, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& __result)

[Info   :  HarmonyX] Running ILHook manipulator on System.Collections.Generic.List<Trader+TradeItem> Trader::GetAvailableItems()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::SetupLanguage(string language) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void PieceManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)
* static void ItemManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::SetupLanguage(string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::LoadCSV(UnityEngine.TextAsset file, string language) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void PieceManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)
* static void ItemManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::LoadCSV(UnityEngine.TextAsset file, string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Turret::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Namespace.TurretConfig_Patch::Turret_Initialize_Patch(Turret __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Turret::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 2 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
2 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Ship::Awake() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void OdinShip.AnimatorPatch::ShipAwake(Ship __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Ship::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Turret::Awake() with 0 prefixes, 1 postfixes, 1 transpilers, 0 finalizers
1 postfixes:
* static void Namespace.TurretConfig_Patch::Turret_Initialize_Patch(Turret __instance)
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> OdinShip.OdinShipPlugin+Turret_Awake_Patch::FixShip(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> code)

[Info   :  HarmonyX] Running ILHook manipulator on void Turret::Awake()
[Info   :  HarmonyX] Transpiling void Turret::Awake()
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> OdinShip.OdinShipPlugin+Turret_Awake_Patch::FixShip(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> code)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual void Player::Start() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void OdinShip.OdinShipPlugin+zbMsXujaMXNjxgBUxSjBPDMqKJWH::ticEuvSIHoCnZIBPKIodIsxuXFDZ()

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Player::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZRpc::HandlePackage(ZPackage package) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZRpc::HandlePackage(ZPackage package)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
4 postfixes:
* static void PieceManager.AdminSyncing::AdminStatusSync(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_Awake(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 2 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
3 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Shutdown(bool save) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Shutdown(bool save)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 5 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
3 postfixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 6 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
3 postfixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 3 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
3 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void Jotunn.Utils.ModCompatibility::FejdStartup_ShowConnectError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :   BepInEx] Loading [Speedy Paths Mod 1.0.8]
[Info   :  HarmonyX] ### Harmony id=harmony-auto-1f219418-6f2e-410c-974d-666151edede3, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void AuthoritativeConfig.Config::init(BepInEx.BaseUnityPlugin mod, bool defaultBindServerAuthority), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\SpeedyPaths.dll
### At 2023-10-07 07.35.11
[Info   :  HarmonyX] Patching void Game::Start() with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void Jotunn.Managers.NetworkManager+Patches::Game_Start()
* static void AuthoritativeConfig.Config::RegisterSyncConfigRPC()

[Info   :  HarmonyX] Running ILHook manipulator on void Game::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 6 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
4 postfixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :AuthoritativeConfig_nex.SpeedyPaths] Initialized Server Authoritative Config Manager.
[Info   :  HarmonyX] ### Harmony id=harmony-auto-b03d3c15-094e-435c-b2fb-77c1ac5ab8e6, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void SpeedyPaths.SpeedyPathsClientMod::Awake(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\SpeedyPaths.dll
### At 2023-10-07 07.35.11
[Info   :  HarmonyX] Patching void Player::FixedUpdate() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void SpeedyPaths.SpeedyPathsClientMod::UpdateModifiers(Player __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::FixedUpdate()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching virtual bool Player::CheckRun(UnityEngine.Vector3 moveDir, float dt) with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void SpeedyPaths.SpeedyPathsClientMod::CheckRunPrefixStaminaMod(Player __instance, Single& __state)
1 postfixes:
* static void SpeedyPaths.SpeedyPathsClientMod::CheckRunPostfixStaminaMod(Player __instance, float __state)

[Info   :  HarmonyX] Running ILHook manipulator on virtual bool Player::CheckRun(UnityEngine.Vector3 moveDir, float dt)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual float Player::GetJogSpeedFactor() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void SpeedyPaths.SpeedyPathsClientMod::JogSpeedPathFactor(Player __instance, Single& __result)

[Info   :  HarmonyX] Running ILHook manipulator on virtual float Player::GetJogSpeedFactor()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual float Player::GetRunSpeedFactor() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void SpeedyPaths.SpeedyPathsClientMod::RunSpeedPathFactor(Player __instance, Single& __result)

[Info   :  HarmonyX] Running ILHook manipulator on virtual float Player::GetRunSpeedFactor()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Hud::UpdateStatusEffects(System.Collections.Generic.List<StatusEffect> statusEffects) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void SpeedyPaths.SpeedyPathsClientMod::UpdatePathIcon(Hud __instance, System.Collections.Generic.List<StatusEffect> statusEffects)

[Info   :  HarmonyX] Running ILHook manipulator on void Hud::UpdateStatusEffects(System.Collections.Generic.List<StatusEffect> statusEffects)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching virtual string StatusEffect::GetIconText() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void SpeedyPaths.SpeedyPathsClientMod::SpeedyPathsStatusEffect_GetIconText(StatusEffect __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on virtual string StatusEffect::GetIconText()
[Info   :  HarmonyX] Writing postfixes
[Info   :   BepInEx] Loading [Display BepInEx Info In-Game 2.0.2]
[Info   :  HarmonyX] ### Harmony id=harmony-auto-9361c1ff-2881-4d09-8859-b6af097908b8, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void Valheim.DisplayBepInExInfo.DisplayInfoPlugin::Awake(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\Valheim.DisplayBepInExInfo.dll
### At 2023-10-07 07.35.11
[Info   :  HarmonyX] Patching void FejdStartup::Start() with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void SlimAssist.SlimAssist+Start_Patch::Postfix(FejdStartup __instance)
* static void Valheim.DisplayBepInExInfo.DisplayInfoPlugin::OnFejdStartup(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching static void ZNet::SetServer(bool server, bool openServer, bool publicServer, string serverName, string password, World world) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Valheim.DisplayBepInExInfo.DisplayInfoPlugin::OnServerStart(string serverName)

[Info   :  HarmonyX] Running ILHook manipulator on static void ZNet::SetServer(bool server, bool openServer, bool publicServer, string serverName, string password, World world)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual void Terminal::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Valheim.DisplayBepInExInfo.DisplayInfoPlugin::FixConsoleMesh()

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Terminal::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Terminal::UpdateChat() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Valheim.DisplayBepInExInfo.DisplayInfoPlugin::FixConsoleMesh2()

[Info   :  HarmonyX] Running ILHook manipulator on void Terminal::UpdateChat()
[Info   :  HarmonyX] Writing postfixes
[Info   :   BepInEx] Loading [ChaosArmor 12.3.2]
[Info   :  HarmonyX] ### Harmony id=org.bepinex.helpers.ItemManager, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void ItemManager.PrefabManager::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\AeehyehssReeper-ChaosArmor\ChaosArmor.dll
### At 2023-10-07 07.35.11
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 3 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable(ObjectDB other)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
4 postfixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 4 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
3 postfixes:
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 4 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable(ObjectDB other)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
4 postfixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 5 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
3 postfixes:
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 4 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::FejdStartup_Awake()
* static void PieceManager.BuildPiece::Patch_FejdStartup(FejdStartup __instance)
* static void ItemManager.Item::Patch_FejdStartup()
* static void ItemManager.Item::Patch_FejdStartup()
1 postfixes:
* static void CraftFromContainers.BepInExPlugin+FejdStartup_Awake_Patch::Postfix(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 2 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
5 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 3 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
5 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void InventoryGui::UpdateRecipe(Player player, float dt) with 0 prefixes, 0 postfixes, 2 transpilers, 0 finalizers
2 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_InventoryGui(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_InventoryGui(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::UpdateRecipe(Player player, float dt)
[Info   :  HarmonyX] Transpiling void InventoryGui::UpdateRecipe(Player player, float dt)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_InventoryGui(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_InventoryGui(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void InventoryGui::SetupRequirementList(int quality, Player player, bool allowedQuality) with 0 prefixes, 0 postfixes, 2 transpilers, 0 finalizers
2 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_SetupRequirementList(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructionsEnumerable, System.Reflection.Emit.ILGenerator ilg)
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_SetupRequirementList(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructionsEnumerable, System.Reflection.Emit.ILGenerator ilg)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::SetupRequirementList(int quality, Player player, bool allowedQuality)
[Info   :  HarmonyX] Transpiling void InventoryGui::SetupRequirementList(int quality, Player player, bool allowedQuality)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_SetupRequirementList(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructionsEnumerable, System.Reflection.Emit.ILGenerator ilg)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_SetupRequirementList(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructionsEnumerable, System.Reflection.Emit.ILGenerator ilg)
[Info   :  HarmonyX] Patching int Piece+Requirement::GetAmount(int qualityLevel) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static bool ItemManager.Item::Patch_RequirementGetAmount(Piece+Requirement __instance, int qualityLevel, Int32& __result)
* static bool ItemManager.Item::Patch_RequirementGetAmount(Piece+Requirement __instance, int qualityLevel, Int32& __result)

[Info   :  HarmonyX] Running ILHook manipulator on int Piece+Requirement::GetAmount(int qualityLevel)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available) with 2 prefixes, 0 postfixes, 0 transpilers, 2 finalizers
2 prefixes:
* static void ItemManager.Item::Patch_GetAvailableRecipesPrefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Collections.Generic.Dictionary`2[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null],[BepInEx.Configuration.ConfigEntryBase, BepInEx, Version=5.4.21.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]& __state)
* static void ItemManager.Item::Patch_GetAvailableRecipesPrefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Collections.Generic.Dictionary`2[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null],[BepInEx.Configuration.ConfigEntryBase, BepInEx, Version=5.4.21.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]& __state)
2 finalizers:
* static void ItemManager.Item::Patch_GetAvailableRecipesFinalizer(System.Collections.Generic.Dictionary<System.Reflection.Assembly, System.Collections.Generic.Dictionary<Recipe, BepInEx.Configuration.ConfigEntryBase>> __state)
* static void ItemManager.Item::Patch_GetAvailableRecipesFinalizer(System.Collections.Generic.Dictionary<System.Reflection.Assembly, System.Collections.Generic.Dictionary<Recipe, BepInEx.Configuration.ConfigEntryBase>> __state)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing finalizers
[Info   :  HarmonyX] Patching int Recipe::GetRequiredStationLevel(int quality) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ItemManager.Item::Patch_MaximumRequiredStationLevel(Recipe __instance, Int32& __result, int quality)
* static void ItemManager.Item::Patch_MaximumRequiredStationLevel(Recipe __instance, Int32& __result, int quality)

[Info   :  HarmonyX] Running ILHook manipulator on int Recipe::GetRequiredStationLevel(int quality)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Smelter::OnAddFuel(Switch sw, Humanoid user, ItemDrop+ItemData item) with 1 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool CraftFromContainers.BepInExPlugin+Smelter_OnAddFuel_Patch::Prefix(Smelter __instance, Boolean& __result, ZNetView ___m_nview, Humanoid user, ItemDrop+ItemData item)
2 postfixes:
* static void ItemManager.Item::Patch_OnAddSmelterInput(ItemDrop+ItemData item, bool __result)
* static void ItemManager.Item::Patch_OnAddSmelterInput(ItemDrop+ItemData item, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool Smelter::OnAddFuel(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Smelter::OnAddOre(Switch sw, Humanoid user, ItemDrop+ItemData item) with 1 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool CraftFromContainers.BepInExPlugin+Smelter_OnAddOre_Patch::Prefix(Smelter __instance, Humanoid user, ItemDrop+ItemData item, ZNetView ___m_nview)
2 postfixes:
* static void ItemManager.Item::Patch_OnAddSmelterInput(ItemDrop+ItemData item, bool __result)
* static void ItemManager.Item::Patch_OnAddSmelterInput(ItemDrop+ItemData item, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool Smelter::OnAddOre(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching System.Collections.Generic.List<Trader+TradeItem> Trader::GetAvailableItems() with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ItemManager.Item::Patch_TraderGetAvailableItems(Trader __instance, System.Collections.Generic.List`1[[Trader+TradeItem, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& __result)
* static void ItemManager.Item::Patch_TraderGetAvailableItems(Trader __instance, System.Collections.Generic.List`1[[Trader+TradeItem, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& __result)

[Info   :  HarmonyX] Running ILHook manipulator on System.Collections.Generic.List<Trader+TradeItem> Trader::GetAvailableItems()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::SetupLanguage(string language) with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void PieceManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)
* static void ItemManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)
* static void ItemManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::SetupLanguage(string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::LoadCSV(UnityEngine.TextAsset file, string language) with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void PieceManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)
* static void ItemManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)
* static void ItemManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::LoadCSV(UnityEngine.TextAsset file, string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] ### Harmony id=harmony-auto-b238aa1e-2931-4bc5-9d66-c0a4a0624f71, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void ChaosArmor.ReepusDeepusDelmeepusChaosArmor::Awake(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\AeehyehssReeper-ChaosArmor\ChaosArmor.dll
### At 2023-10-07 07.35.12
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 5 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
4 postfixes:
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ObjectDBPatch::Patch_ObjectDBAwake(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 3 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
6 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ZNetScenePatch::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void AudioMan::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+AudioManPatch::Patch_AudioManAwake(AudioMan __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void AudioMan::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Character::RPC_Damage(long sender, HitData hit) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void ChaosArmor.PoiseBois+ReduceDamageTaken::Prefix(Character __instance, HitData hit)

[Info   :  HarmonyX] Running ILHook manipulator on void Character::RPC_Damage(long sender, HitData hit)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZRpc::HandlePackage(ZPackage package) with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZRpc::HandlePackage(ZPackage package)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
5 postfixes:
* static void PieceManager.AdminSyncing::AdminStatusSync(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_Awake(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 3 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
4 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Shutdown(bool save) with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Shutdown(bool save)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 7 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
7 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
5 postfixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 8 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
8 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
5 postfixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 4 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
4 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
4 postfixes:
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void Jotunn.Utils.ModCompatibility::FejdStartup_ShowConnectError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :   BepInEx] Loading [Bears 0.1.4]
[Info   :  HarmonyX] ### Harmony id=harmony-auto-f4d4ada5-0f58-4313-8854-6f18dad60b6a, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void Bears.Plugin::Awake(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\Bears\Bears.dll
### At 2023-10-07 07.35.13
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 4 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
6 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ZNetScenePatch::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 4 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable(ObjectDB other)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
5 postfixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Bears.Plugin+ObjectDB_CopyOtherDB_Patch::Postfix()
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 5 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
5 postfixes:
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void Bears.Plugin+ObjectDB_Awake_Patch::Postfix()
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ObjectDBPatch::Patch_ObjectDBAwake(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void SpawnSystem::UpdateSpawnList(System.Collections.Generic.List<SpawnSystem+SpawnData> spawners, DateTime currentTime, bool eventSpawners) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Bears.Plugin+SpawnSystem_Patch::Prefix(SpawnSystem __instance, System.Collections.Generic.List`1[[SpawnSystem+SpawnData, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& spawners)

[Info   :  HarmonyX] Running ILHook manipulator on void SpawnSystem::UpdateSpawnList(System.Collections.Generic.List<SpawnSystem+SpawnData> spawners, DateTime currentTime, bool eventSpawners)
[Info   :  HarmonyX] Writing prefixes
[Info   :   BepInEx] Loading [Vortex Worlds 1.0.1]
[Error  : Unity Log] MissingMethodException: string Utils.GetSaveDataPath()
Stack trace:
UnityEngine.GameObject:AddComponent(Type)
BepInEx.Bootstrap.Chainloader:Start()
UnityEngine.UI.Graphic:get_canvas()
TMPro.TextMeshProUGUI:OnCanvasHierarchyChanged()

[Message:   BepInEx] Chainloader startup complete
[Warning: Unity Log] 10/07/2023 07:35:13: Fetching PlatformPrefs 'GuiScale' before loading defaults

[Warning: Unity Log] 10/07/2023 07:35:13: Fetching PlatformPrefs 'GuiScale' before loading defaults

[Info   :  HarmonyX] Patching void VisEquipment::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::VisEqAwakePatch(VisEquipment __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void VisEquipment::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool VisEquipment::SetRightHandEquipped(int hash) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::SetRightHandPatch(VisEquipment __instance, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetRightHandEquipped(int hash)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool VisEquipment::SetLeftHandEquipped(int hash, int variant) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::SetLeftHandPatch(VisEquipment __instance, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetLeftHandEquipped(int hash, int variant)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool VisEquipment::SetChestEquipped(int hash) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::SetChestPatch(VisEquipment __instance, bool __result, int hash)

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetChestEquipped(int hash)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool VisEquipment::SetLegEquipped(int hash) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::SetLegPatch(VisEquipment __instance, bool __result, int hash)

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetLegEquipped(int hash)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool VisEquipment::SetHelmetEquipped(int hash, int hairHash) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::SetHelmetPatch(VisEquipment __instance, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetHelmetEquipped(int hash, int hairHash)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool VisEquipment::SetShoulderEquipped(int hash, int variant) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::SetShoulderPtach(VisEquipment __instance, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetShoulderEquipped(int hash, int variant)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool VisEquipment::SetUtilityEquipped(int hash) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::SetUtilityPatch(VisEquipment __instance, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetUtilityEquipped(int hash)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching UnityEngine.GameObject VisEquipment::AttachItem(int itemHash, int variant, UnityEngine.Transform joint, bool enableEquipEffects, bool backAttach) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BoneReorder::AttachItemPatch(VisEquipment __instance, UnityEngine.GameObject __result, int itemHash)

[Info   :  HarmonyX] Running ILHook manipulator on UnityEngine.GameObject VisEquipment::AttachItem(int itemHash, int variant, UnityEngine.Transform joint, bool enableEquipEffects, bool backAttach)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching System.Collections.Generic.List<UnityEngine.GameObject> VisEquipment::AttachArmor(int itemHash, int variant) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BoneReorder::AttachArmorPatch(VisEquipment __instance, System.Collections.Generic.List<UnityEngine.GameObject> __result, int itemHash)

[Info   :  HarmonyX] Running ILHook manipulator on System.Collections.Generic.List<UnityEngine.GameObject> VisEquipment::AttachArmor(int itemHash, int variant)
[Info   :  HarmonyX] Writing postfixes
[Info   : Unity Log] 10/07/2023 07:35:13: Starting to load scene:start

[Info   : Unity Log] 10/07/2023 07:35:13: Using environment steamid 892970

[Info   : Unity Log] 10/07/2023 07:35:13: Using steam APPID:892970

[Info   : Unity Log] 10/07/2023 07:35:13: Authentication:k_ESteamNetworkingAvailability_Attempting

[Debug  :   BepInEx] [UnityInput] Using LegacyInputSystem
[Warning: Unity Log] Only custom filters can be played. Please add a custom filter or an audioclip to the audiosource (Amb_MainMenu).
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 4 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_GetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 4 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_SetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   :Jotunn.Main] Initializing GUIManager
[Info   :  HarmonyX] Patching bool PlayerController::TakeInput(bool look) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.GUIManager+Patches::TakeInputPatch(Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool PlayerController::TakeInput(bool look)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual bool Player::TakeInput() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.GUIManager+Patches::TakeInputPatch(Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on virtual bool Player::TakeInput()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching static bool TextInput::IsVisible() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.GUIManager+Patches::TextInputPatch(Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on static bool TextInput::IsVisible()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void InventoryGui::Update() with 1 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 prefixes:
* static void CraftFromContainers.BepInExPlugin+InventoryGui_Update_Patch::Prefix(InventoryGui __instance, UnityEngine.Animator ___m_animator)
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.GUIManager+Patches::BlockUsePatch(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::Update()
[Info   :  HarmonyX] Transpiling void InventoryGui::Update()
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.GUIManager+Patches::BlockUsePatch(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void GameCamera::UpdateCamera(float dt) with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.GUIManager+Patches::BlockUsePatch(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void GameCamera::UpdateCamera(float dt)
[Info   :  HarmonyX] Transpiling void GameCamera::UpdateCamera(float dt)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.GUIManager+Patches::BlockUsePatch(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void FejdStartup::SetupGui() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.GUIManager+Patches::CreateCustomGUI()

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::SetupGui()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Game::Start() with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void Jotunn.Managers.NetworkManager+Patches::Game_Start()
* static void AuthoritativeConfig.Config::RegisterSyncConfigRPC()
* static void Jotunn.Managers.GUIManager+Patches::CreateCustomGUI()

[Info   :  HarmonyX] Running ILHook manipulator on void Game::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #0 - 'localization' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #1 - 'localization_extra' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #2 - 'heightmap_message' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #3 - 'localization_hildir' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #4 - 'localization_emotes' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #0 - 'localization' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #1 - 'localization_extra' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #2 - 'heightmap_message' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #3 - 'localization_hildir' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #4 - 'localization_emotes' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #0 - 'localization' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #1 - 'localization_extra' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #2 - 'heightmap_message' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #3 - 'localization_hildir' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Loaded localization file #4 - 'localization_emotes' language: 'English'

[Info   : Unity Log] 10/07/2023 07:35:20: Steam initialized, persona:Stanlie

[Info   : Unity Log] 10/07/2023 07:35:20: PlayFab custom ID set to "Steam_76561197995573406"

[Info   : Unity Log] 10/07/2023 07:35:20: Using default prefs

[Info   : Unity Log] 10/07/2023 07:35:20: Valheim version: 0.217.24 (network version 15)

[Info   : Unity Log] 10/07/2023 07:35:20: Worldgenerator version setup:2

[Info   : Unity Log] 10/07/2023 07:35:20: Render threading mode:MultiThreaded

[Warning: Unity Log] 10/07/2023 07:35:20: Set button "CamZoomIn" to None!

[Warning: Unity Log] 10/07/2023 07:35:20: Set button "CamZoomOut" to None!

[Warning: Unity Log] 10/07/2023 07:35:20: Set button "CamZoomIn" to None!

[Warning: Unity Log] 10/07/2023 07:35:20: Set button "CamZoomOut" to None!

[Warning: Unity Log] 10/07/2023 07:35:20: Missing audio clip in music respawn

[Info   : Unity Log] 10/07/2023 07:35:20: Checking for installed DLCs

[Info   : Unity Log] 10/07/2023 07:35:20: DLC:beta installed:False

[Debug  :Jotunn.Managers.SynchronizationManager] Gathering config values
[Info   : Unity Log] 10/07/2023 07:35:20: Vis equip model set to 1

[Info   : Unity Log] 10/07/2023 07:35:21: Sending PlayFab login request (attempt 1)

[Debug  :  OdinShip] ReadConfigValues called
[Info   : Unity Log] 10/07/2023 07:35:21: Session auth respons callback

[Info   : Unity Log] 10/07/2023 07:35:21: Ticket is System.Byte[] of length 369

[Info   : Unity Log] 10/07/2023 07:35:21: Starting music menu

[Info   : Unity Log] 10/07/2023 07:35:22: PlayFab logged in as "Steam_76561197995573406"

[Info   : Unity Log] 10/07/2023 07:35:22: PlayFab local entity ID is 9D72CE5C0E22C17D

[Info   : Unity Log] 10/07/2023 07:35:29: Stopping build thread

[Info   :  HarmonyX] Patching void Hud::UpdateFood(Player player) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Hud::UpdateFood(Player player)
[Info   :  HarmonyX] Patching bool Player::EatFood(ItemDrop+ItemData item) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool Player::EatFood(ItemDrop+ItemData item)
[Info   :  HarmonyX] Patching void Player::GetTotalFoodValue(Single& hp, Single& stamina, Single& eitr) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Player::GetTotalFoodValue(Single& hp, Single& stamina, Single& eitr)
[Info   :  HarmonyX] Patching void ZRpc::HandlePackage(ZPackage package) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZRpc::HandlePackage(ZPackage package)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
4 postfixes:
* static void PieceManager.AdminSyncing::AdminStatusSync(ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_Awake(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 4 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
3 postfixes:
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 3 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
3 postfixes:
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Shutdown(bool save) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Shutdown(bool save)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 8 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
8 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
4 postfixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 7 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
7 prefixes:
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
4 postfixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 6 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
4 postfixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_GetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_SetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void Jotunn.Utils.ModCompatibility::FejdStartup_ShowConnectError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Attack::OnAttackTrigger() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Attack::OnAttackTrigger()
[Info 