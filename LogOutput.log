[Message:   BepInEx] BepInEx 5.4.21.0 - valheim (01/04/2023 15:08:30)
[Info   :   BepInEx] Running under Unity v2020.3.45.6687953
[Info   :   BepInEx] CLR runtime version: 4.0.30319.42000
[Info   :   BepInEx] Supports SRE: True
[Info   :   BepInEx] System platform: Bits64, Windows
[Message:   BepInEx] Preloader started
[Info   :   BepInEx] Loaded 1 patcher method from [BepInEx.Preloader 5.4.21.0]
[Info   :   BepInEx] Loaded 1 patcher method from [SlimVML.Loader 1.1.0.0]
[Info   :   BepInEx] 2 patcher plugins loaded
[Info   :   BepInEx] Patching [UnityEngine.CoreModule] with [BepInEx.Chainloader]
[Info   :   SlimVML] Loading DLLs from C:\Program Files (x86)\Steam\steamapps\common\Valheim\InSlimVML\Mods
[Warning:   SlimVML] Skipping 0Harmony.dll since it's in ignore list
[Info   :   SlimVML] Invoking static void SlimAssist.SlimAssist::Main(string[] args)
[Message:   BepInEx] Preloader finished
[Message:   BepInEx] Chainloader ready
[Message:   BepInEx] Chainloader started
[Info   :   BepInEx] 16 plugins to load
[Info   :   BepInEx] Loading [FoodDurationMultiplier 1.0.8]
[Info   :  HarmonyX] ### Harmony id=blacks7ar.FoodDurationMultiplier, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void FoodDurationMultiplier.Plugin::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\FoodDurationMultiplier.dll
### At 2023-09-17 11.29.04
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::ShowConnectionError_Postfix(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::ZNetDisconnect_Prefix(ZNetPeer peer, ZNet& __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
1 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Hud::UpdateFood(Player player) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void FoodDurationMultiplier.Patches.HudPatch::UpdateFood_Prefix(Player+Food& player)

[Info   :  HarmonyX] Running ILHook manipulator on void Hud::UpdateFood(Player player)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching bool Player::EatFood(ItemDrop+ItemData item) with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> FoodDurationMultiplier.Patches.PlayerPatch+EatFoodPatch::Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on bool Player::EatFood(ItemDrop+ItemData item)
[Info   :  HarmonyX] Transpiling bool Player::EatFood(ItemDrop+ItemData item)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> FoodDurationMultiplier.Patches.PlayerPatch+EatFoodPatch::Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void Player::GetTotalFoodValue(Single& hp, Single& stamina, Single& eitr) with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> FoodDurationMultiplier.Patches.PlayerPatch+GetTotalFoodValuePatch::Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::GetTotalFoodValue(Single& hp, Single& stamina, Single& eitr)
[Info   :  HarmonyX] Transpiling void Player::GetTotalFoodValue(Single& hp, Single& stamina, Single& eitr)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> FoodDurationMultiplier.Patches.PlayerPatch+GetTotalFoodValuePatch::Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void ZRpc::HandlePackage(ZPackage package) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZRpc::HandlePackage(ZPackage package)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
1 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Shutdown(bool save) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Shutdown(bool save)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 2 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
2 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 3 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
2 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 2 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
1 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::ZNetDisconnect_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::ShowConnectionError_Postfix(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :   BepInEx] Loading [RenegadeVikings 1.1.6]
[Info   :  HarmonyX] ### Harmony id=blacks7ar.RenegadeVikings, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void RenegadeVikings.Plugin::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\RenegadeVikings.dll
### At 2023-09-17 11.29.05
[Info   :  HarmonyX] ### Harmony id=org.bepinex.helpers.LocalizationManager, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void LocalizationManager.Localizer::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\RenegadeVikings.dll
### At 2023-09-17 11.29.05
[Info   :  HarmonyX] Patching bool Localization::LoadCSV(UnityEngine.TextAsset file, string language) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void LocalizationManager.Localizer::LoadLocalization(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::LoadCSV(UnityEngine.TextAsset file, string language)
[Info   :  HarmonyX] Writing postfixes
[Info   : Unity Log] 09/17/2023 11:29:05: Loaded localization file #0 - 'localization' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:05: Loaded localization file #1 - 'localization_extra' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:05: Loaded localization file #2 - 'heightmap_message' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:05: Loaded localization file #3 - 'localization_hildir' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:05: Loaded localization file #4 - 'localization_emotes' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:05: Loaded localization file #0 - 'localization' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:05: Loaded localization file #1 - 'localization_extra' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:05: Loaded localization file #2 - 'heightmap_message' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:05: Loaded localization file #3 - 'localization_hildir' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:05: Loaded localization file #4 - 'localization_emotes' language: 'English'

[Info   :  HarmonyX] Patching void FejdStartup::Start() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void SlimAssist.SlimAssist+Start_Patch::Postfix(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 3 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
1 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::ShowConnectionError_Postfix(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void RenegadeVikings.Utilities.VersionCheck::ShowConnectionError_Postfix(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::ZNetDisconnect_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::ZNetDisconnect_Prefix(ZNetPeer peer, ZNet& __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 4 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
3 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool MonsterAI::UpdateConsumeItem(Humanoid humanoid, float dt) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void RenegadeVikings.Patches.MonsterAIPatch::Postfix(MonsterAI __instance, ZNetView ___m_nview, Character ___m_character, Tameable ___m_tamable, System.Collections.Generic.List<ItemDrop> ___m_consumeItems, float dt, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool MonsterAI::UpdateConsumeItem(Humanoid humanoid, float dt)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::Awake_Postfix(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::CopyOtherDB_Postfix(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual bool Player::TeleportTo(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, bool distantTeleport) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void RenegadeVikings.Patches.PlayerPatch::TeleportTo_Prefix(Player __instance)

[Info   :  HarmonyX] Running ILHook manipulator on virtual bool Player::TeleportTo(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, bool distantTeleport)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Player::UpdateTeleport(float dt) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void RenegadeVikings.Patches.PlayerPatch::UpdateTeleport_Postfix(Boolean& ___m_teleporting, Single& ___m_teleportTimer, UnityEngine.Vector3& ___m_teleportTargetPos, UnityEngine.Quaternion& ___m_teleportTargetRot)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::UpdateTeleport(float dt)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<RandomEvent, UnityEngine.Vector3>> RandEventSystem::GetPossibleRandomEvents() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void RenegadeVikings.Patches.RandomEventSystemPatch::Postfix(RandEventSystem __instance)

[Info   :  HarmonyX] Running ILHook manipulator on System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<RandomEvent, UnityEngine.Vector3>> RandEventSystem::GetPossibleRandomEvents()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void SpawnSystem::UpdateSpawnList(System.Collections.Generic.List<SpawnSystem+SpawnData> spawners, DateTime currentTime, bool eventSpawners) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void RenegadeVikings.Patches.SpawnSystemPatch::Prefix(SpawnSystem __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void SpawnSystem::UpdateSpawnList(System.Collections.Generic.List<SpawnSystem+SpawnData> spawners, DateTime currentTime, bool eventSpawners)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void RenegadeVikings.Patches.ZNetScenePatch::Postfix(ZNetScene __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZRpc::HandlePackage(ZPackage package) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZRpc::HandlePackage(ZPackage package)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 3 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
2 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Shutdown(bool save) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Shutdown(bool save)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 5 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
4 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 6 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
4 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 4 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
2 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 4 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::ZNetDisconnect_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::ZNetDisconnect_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
4 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::ShowConnectionError_Postfix(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void RenegadeVikings.Utilities.VersionCheck::ShowConnectionError_Postfix(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :   BepInEx] Loading [Configuration Manager 17.1]
[Info   :   BepInEx] Loading [Jotunn 2.12.7]
[Info   :  HarmonyX] ### Harmony id=com.jotunn.jotunn, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void Jotunn.Main::Awake(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\Jotunn\Jotunn.dll
### At 2023-09-17 11.29.06
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 5 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void FoodDurationMultiplier.Utils.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
2 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_ClientHandshake(ZRpc rpc, bool needPassword, string serverPasswordSalt) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_RPC_ClientHandshake(ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_ClientHandshake(ZRpc rpc, bool needPassword, string serverPasswordSalt)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_ServerHandshake(ZRpc rpc) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_RPC_ServerHandshake(ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_ServerHandshake(ZRpc rpc)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
5 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::ShowConnectionError_Postfix(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void RenegadeVikings.Utilities.VersionCheck::ShowConnectionError_Postfix(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void Jotunn.Utils.ModCompatibility::FejdStartup_ShowConnectError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::SendPeerInfo(ZRpc rpc, string password) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool Jotunn.Utils.ModCompatibility::ZNet_SendPeerInfo(ZNet __instance, ZRpc rpc, string password)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::SendPeerInfo(ZRpc rpc, string password)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 7 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
7 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
4 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :    Jotunn] Initializing LocalizationManager
[Info   :  HarmonyX] Patching void FejdStartup::SetupGui() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.LocalizationManager+Patches::LoadAndSetupModLanguages()

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::SetupGui()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching System.Collections.Generic.List<string> Localization::LoadLanguages() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.LocalizationManager+Patches::Localization_LoadLanguages(System.Collections.Generic.List`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]& __result)

[Info   :  HarmonyX] Running ILHook manipulator on System.Collections.Generic.List<string> Localization::LoadLanguages()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::SetupLanguage(string language) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.LocalizationManager+Patches::Localization_SetupLanguage(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::SetupLanguage(string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :    Jotunn] Initializing CommandManager
[Info   :  HarmonyX] Patching virtual void Console::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.CommandManager+Patches::AddCustomCommands(Console __instance)

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Console::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching System.Collections.Generic.List<string> Terminal+ConsoleCommand::GetTabOptions() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.CommandManager+Patches::ConsoleCommand_GetTabOptions(Terminal+ConsoleCommand __instance, System.Collections.Generic.List`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]& __result)

[Info   :  HarmonyX] Running ILHook manipulator on System.Collections.Generic.List<string> Terminal+ConsoleCommand::GetTabOptions()
[Info   :  HarmonyX] Writing postfixes
[Info   :    Jotunn] Initializing InputManager
[Info   :  HarmonyX] Reverse patching static bool Jotunn.Managers.InputManager+Patches::ZInput_GetButtonDown_Original(string name) with static bool ZInput::GetButtonDown(string name)

[Info   :  HarmonyX] Reverse patching static bool Jotunn.Managers.InputManager+Patches::ZInput_GetButton_Original(string name) with static bool ZInput::GetButton(string name)

[Info   :  HarmonyX] Reverse patching static bool Jotunn.Managers.InputManager+Patches::ZInput_GetButtonUp_Original(string name) with static bool ZInput::GetButtonUp(string name)

[Info   :  HarmonyX] Patching void ZInput::Load() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.InputManager+Patches::RegisterCustomInputs(ZInput __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZInput::Load()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching static bool ZInput::GetButtonDown(string name) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.InputManager+Patches::ZInput_GetButtonDown(string name, Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on static bool ZInput::GetButtonDown(string name)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching static bool ZInput::GetButton(string name) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.InputManager+Patches::ZInput_GetButton(string name, Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on static bool ZInput::GetButton(string name)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching static bool ZInput::GetButtonUp(string name) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.InputManager+Patches::ZInput_GetButtonUp(string name, Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on static bool ZInput::GetButtonUp(string name)
[Info   :  HarmonyX] Writing postfixes
[Info   :    Jotunn] Initializing SkillManager
[Info   :  HarmonyX] Patching void Skills::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.SkillManager+Patches::RegisterCustomSkills(Skills __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Skills::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching static bool Skills::IsSkillValid(Skills+SkillType type) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.SkillManager+Patches::Skills_IsSkillValid(Skills __instance, Skills+SkillType type, Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on static bool Skills::IsSkillValid(Skills+SkillType type)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching Skills+Skill Skills::GetSkill(Skills+SkillType skillType) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.SkillManager+Patches::Skills_GetSkill(Skills __instance, Skills+SkillType& skillType)

[Info   :  HarmonyX] Running ILHook manipulator on Skills+Skill Skills::GetSkill(Skills+SkillType skillType)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Skills::CheatRaiseSkill(string name, float value, bool showMessage) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool Jotunn.Managers.SkillManager+Patches::Skills_CheatRaiseSkill(Skills __instance, string name, float value)

[Info   :  HarmonyX] Running ILHook manipulator on void Skills::CheatRaiseSkill(string name, float value, bool showMessage)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Skills::CheatResetSkill(string name) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool Jotunn.Managers.SkillManager+Patches::Skills_CheatResetSkill(Skills __instance, string name)

[Info   :  HarmonyX] Running ILHook manipulator on void Skills::CheatResetSkill(string name)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching static void Terminal::InitTerminal() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.SkillManager+Patches::Terminal_InitTerminal()

[Info   :  HarmonyX] Running ILHook manipulator on static void Terminal::InitTerminal()
[Info   :  HarmonyX] Writing postfixes
[Info   :    Jotunn] Initializing PrefabManager
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void RenegadeVikings.Patches.ZNetScenePatch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
1 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::CopyOtherDB_Postfix(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :    Jotunn] Initializing ItemManager
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 2 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
2 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::CopyOtherDB_Postfix(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 1 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
2 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::Awake_Postfix(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Player::OnSpawned() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.ItemManager+Patches::ReloadKnownRecipes(Player __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::OnSpawned()
[Info   :  HarmonyX] Writing postfixes
[Info   :    Jotunn] Initializing PieceManager
[Info   :  HarmonyX] Patching void PieceTable::NextCategory() with 0 prefixes, 1 postfixes, 1 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.PieceManager+Patches::PieceTable_NextCategory_Postfix(PieceTable __instance)
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::NextCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::NextCategory()
[Info   :  HarmonyX] Transpiling void PieceTable::NextCategory()
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::NextCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void PieceTable::PrevCategory() with 0 prefixes, 1 postfixes, 1 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.PieceManager+Patches::PieceTable_PrevCategory_Postfix(PieceTable __instance)
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::PrevCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::PrevCategory()
[Info   :  HarmonyX] Transpiling void PieceTable::PrevCategory()
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::PrevCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual void Player::SetPlaceMode(PieceTable buildPieces) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.PieceManager+Patches::Player_SetPlaceMode()

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Player::SetPlaceMode(PieceTable buildPieces)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Hud::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.PieceManager+Patches::Hud_Awake()

[Info   :  HarmonyX] Running ILHook manipulator on void Hud::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Hud::LateUpdate() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.PieceManager+Patches::Hud_LateUpdate()

[Info   :  HarmonyX] Running ILHook manipulator on void Hud::LateUpdate()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 1 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
4 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::Awake_Postfix(ObjectDB __instance)
* static void Jotunn.Managers.PieceManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()
* static void Jotunn.Managers.PieceManager+Patches::InvokeOnPiecesRegistered(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Player::OnSpawned() with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void Jotunn.Managers.ItemManager+Patches::ReloadKnownRecipes(Player __instance)
* static void Jotunn.Managers.PieceManager+Patches::ReloadKnownRecipes(Player __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::OnSpawned()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost) with 1 prefixes, 1 postfixes, 1 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.PieceManager+Patches::PieceTable_UpdateAvailable_Prefix(PieceTable __instance)
1 postfixes:
* static void Jotunn.Managers.PieceManager+Patches::PieceTable_UpdateAvailable_Postfix(PieceTable __instance)
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::UpdateAvailable_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost)
[Info   :  HarmonyX] Transpiling void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::UpdateAvailable_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void PieceTable::SetCategory(int index) with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::SetCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::SetCategory(int index)
[Info   :  HarmonyX] Transpiling void PieceTable::SetCategory(int index)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::SetCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching static Array Enum::GetValues(Type enumType) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.PieceManager+Patches::EnumGetValuesPatch(Type enumType, Array& __result)

[Info   :  HarmonyX] Running ILHook manipulator on static Array Enum::GetValues(Type enumType)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching static string[] Enum::GetNames(Type enumType) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.PieceManager+Patches::EnumGetNamesPatch(Type enumType, String[]& __result)

[Info   :  HarmonyX] Running ILHook manipulator on static string[] Enum::GetNames(Type enumType)
[Info   :  HarmonyX] Writing postfixes
[Info   :    Jotunn] Initializing CreatureManager
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 3 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
2 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::CopyOtherDB_Postfix(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 0 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
4 postfixes:
* static void RenegadeVikings.Patches.ZNetScenePatch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.CreatureManager+Patches::FixReferences(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void SpawnSystem::Awake() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::AddSpawnListToSpawnSystem(SpawnSystem __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void SpawnSystem::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void LevelEffects::SetupLevelVisualization(int level) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.CreatureManager+Patches::EnableCumulativeLevelEffects(LevelEffects __instance, int level)

[Info   :  HarmonyX] Running ILHook manipulator on void LevelEffects::SetupLevelVisualization(int level)
[Info   :  HarmonyX] Writing postfixes
[Info   :    Jotunn] Initializing ZoneManager
[Info   :  HarmonyX] Patching void ZoneSystem::SetupLocations() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.ZoneManager+Patches::ZoneSystem_SetupLocations(ZoneSystem __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZoneSystem::SetupLocations()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ClutterSystem::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.ZoneManager+Patches::ClutterSystem_Awake(ClutterSystem __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ClutterSystem::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :    Jotunn] Initializing MockManager
[Info   :    Jotunn] Initializing KitbashManager
[Info   :    Jotunn] Initializing GUIManager
[Info   :  HarmonyX] Patching bool PlayerController::TakeInput(bool look) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.GUIManager+Patches::TakeInputPatch(Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool PlayerController::TakeInput(bool look)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual bool Player::TakeInput() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.GUIManager+Patches::TakeInputPatch(Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on virtual bool Player::TakeInput()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching static bool TextInput::IsVisible() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.GUIManager+Patches::TextInputPatch(Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on static bool TextInput::IsVisible()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void InventoryGui::Update() with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.GUIManager+Patches::InventoryGui_Update(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::Update()
[Info   :  HarmonyX] Transpiling void InventoryGui::Update()
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.GUIManager+Patches::InventoryGui_Update(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void FejdStartup::SetupGui() with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void Jotunn.Managers.LocalizationManager+Patches::LoadAndSetupModLanguages()
* static void Jotunn.Managers.GUIManager+Patches::FejdStartup_SetupGui(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::SetupGui()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Game::Start() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.GUIManager+Patches::Game_Start(Game __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Game::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :    Jotunn] Initializing KeyHintManager
[Info   :  HarmonyX] Patching void KeyHints::Start() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.KeyHintManager+Patches::KeyHints_Start(KeyHints __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void KeyHints::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void KeyHints::UpdateHints() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool Jotunn.Managers.KeyHintManager+Patches::KeyHints_UpdateHints(KeyHints __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void KeyHints::UpdateHints()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZInput::Save() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.KeyHintManager+Patches::ZInput_Save(ZInput __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZInput::Save()
[Info   :  HarmonyX] Writing postfixes
[Info   :    Jotunn] Initializing NetworkManager
[Info   :  HarmonyX] Patching void Game::Start() with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void Jotunn.Managers.GUIManager+Patches::Game_Start(Game __instance)
* static void Jotunn.Managers.NetworkManager+Patches::Game_Start()

[Info   :  HarmonyX] Running ILHook manipulator on void Game::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :    Jotunn] Initializing SynchronizationManager
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_Awake(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 8 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
8 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
5 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void SyncedList::Load() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::SyncedList_Load(SyncedList __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void SyncedList::Load()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void SyncedList::Save() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::SyncedList_Save(SyncedList __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void SyncedList::Save()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching static bool Menu::IsVisible() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::Menu_IsVisible(Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on static bool Menu::IsVisible()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::FejdStartup_Awake()

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Writing prefixes
[Debug  :Jotunn.Managers.SynchronizationManager] Configuration manager found, trying to hook DisplayingWindowChanged
[Info   :    Jotunn] Initializing RenderManager
[Info   :    Jotunn] Initializing MinimapManager
[Info   :  HarmonyX] Patching void Minimap::Start() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.MinimapManager+Patches::Start()

[Info   :  HarmonyX] Running ILHook manipulator on void Minimap::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Minimap::LoadMapData() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.MinimapManager+Patches::LoadMapData()

[Info   :  HarmonyX] Running ILHook manipulator on void Minimap::LoadMapData()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Minimap::CenterMap(UnityEngine.Vector3 centerPoint) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.MinimapManager+Patches::Minimap_CenterMap(Minimap __instance, UnityEngine.Vector3 centerPoint)

[Info   :  HarmonyX] Running ILHook manipulator on void Minimap::CenterMap(UnityEngine.Vector3 centerPoint)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Minimap::OnDestroy() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.MinimapManager+Patches::Minimap_OnDestroy()

[Info   :  HarmonyX] Running ILHook manipulator on void Minimap::OnDestroy()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void UnityEngine.Texture2D::Apply(bool updateMipmaps, bool makeNoLongerReadable) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.MinimapManager::Texture2D_Apply(UnityEngine.Texture2D __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void UnityEngine.Texture2D::Apply(bool updateMipmaps, bool makeNoLongerReadable)
[Info   :  HarmonyX] Writing prefixes
[Info   :    Jotunn] Initializing UndoManager
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 1 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
4 postfixes:
* static void RenegadeVikings.Patches.ZNetScenePatch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.CreatureManager+Patches::FixReferences(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Shutdown() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesAfter(ZNetScene __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Shutdown()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::OnDestroy() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Utils.ModQuery::ZNetSceneOnDestroy()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::OnDestroy()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::FejdStartup_Awake()
1 postfixes:
* static void Jotunn.Utils.ModQuery::FejdStartup_Awake_Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 2 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
4 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::Awake_Postfix(ObjectDB __instance)
* static void Jotunn.Managers.PieceManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()
* static void Jotunn.Managers.PieceManager+Patches::InvokeOnPiecesRegistered(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :    Jotunn] Jötunn v2.12.7 loaded successfully
[Info   :   BepInEx] Loading [EnhancedBosses 2.0.0]
[Info   :  HarmonyX] ### Harmony id=blumaye.enhancedbosses, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void EnhancedBosses.Main::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\EnhancedBosses\EnhancedBosses.dll
### At 2023-09-17 11.29.06
[Info   :  HarmonyX] Patching void Attack::OnAttackTrigger() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool EnhancedBosses.Attack_OnAttackTrigger+Attack_OnAttackTrigger_Prefix::Prefix(Attack __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Attack::OnAttackTrigger()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching bool BaseAI::CanUseAttack(ItemDrop+ItemData item) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void EnhancedBosses.BaseAI_CanUseAttack+BaseAI_CanUseAttack_Postfix::Postfix(BaseAI __instance, ItemDrop+ItemData item, Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool BaseAI::CanUseAttack(ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool EnemyHud::TestShow(Character c, bool isVisible) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void EnhancedBosses.EnemyHud_TestShow+EnemyHud_TestShow_Postfix::Postfix(Character& c, Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool EnemyHud::TestShow(Character c, bool isVisible)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Minimap::UpdateEventPin(float dt) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void EnhancedBosses.Minimap_UpdateEventPin+UpdateEventMobMinimapPinsPatch::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void Minimap::UpdateEventPin(float dt)
[Info   :  HarmonyX] Writing postfixes
[Info   :   BepInEx] Loading [Use Equipment in Water 0.2.4]
[Info   :  HarmonyX] ### Harmony id=harmony-auto-2fa81e42-959c-43a0-88b6-76a6048cfaee, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void Use_Equipment_in_Water.UseEquipmentInWater::Awake(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\UseEquipmentInWater.dll
### At 2023-09-17 11.29.06
[Info   :  HarmonyX] Patching bool Character::IsSwimming() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool Use_Equipment_in_Water.UseEquipmentInWater::patchIsSwim(Boolean& __result, Humanoid __instance, float ___m_swimTimer)

[Info   :  HarmonyX] Running ILHook manipulator on bool Character::IsSwimming()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching bool Humanoid::EquipItem(ItemDrop+ItemData item, bool triggerEquipEffects) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Use_Equipment_in_Water.UseEquipmentInWater::patchEquipItem()

[Info   :  HarmonyX] Running ILHook manipulator on bool Humanoid::EquipItem(ItemDrop+ItemData item, bool triggerEquipEffects)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Humanoid::UpdateEquipment(float dt) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Use_Equipment_in_Water.UseEquipmentInWater::patchUpdateEquipment()

[Info   :  HarmonyX] Running ILHook manipulator on void Humanoid::UpdateEquipment(float dt)
[Info   :  HarmonyX] Writing prefixes
[Info   :   BepInEx] Loading [BlacksmithTools 2.0.1]
[Info   :  HarmonyX] ### Harmony id=GoldenJude_BlacksmithTools, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void BlacksmithTools.Main::.ctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\BlacksmithTools.dll
### At 2023-09-17 11.29.07
[Info   :   BepInEx] Loading [Hitbox Fix 1.3.0]
[Info   :  HarmonyX] ### Harmony id=hitbox.fix, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void Hitbox_Fix.HitboxFix::.ctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\HitboxFix.dll
### At 2023-09-17 11.29.07
[Info   :  HarmonyX] Patching void Attack::DoMeleeAttack() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Hitbox_Fix.HitboxFix+Hitbox_Patch::Prefix(Single& ___m_maxYAngle, Single& ___m_attackOffset, Single& ___m_attackHeight)

[Info   :  HarmonyX] Running ILHook manipulator on void Attack::DoMeleeAttack()
[Info   :  HarmonyX] Writing prefixes
[Info   :   BepInEx] Loading [Better Archery 1.9.3]
[Info   :  HarmonyX] ### Harmony id=harmony-auto-4bc14399-d237-4379-8864-1a90813e49e4, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void BetterArchery.BetterArchery::Awake(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\BetterArchery.dll
### At 2023-09-17 11.29.07
[Info   :  HarmonyX] Patching virtual void Terminal::InputText() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool BetterArchery.InputText_Patch::Prefix(Terminal __instance)

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Terminal::InputText()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching bool ItemDrop+ItemData::IsEquipable() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Patches::IsEquipablePostfix(Boolean& __result, ItemDrop+ItemData& __instance)

[Info   :  HarmonyX] Running ILHook manipulator on bool ItemDrop+ItemData::IsEquipable()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual void Humanoid::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Patches::HumanoidEntryPostfix(Humanoid& __instance)

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Humanoid::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Player::Load(ZPackage pkg) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Patches::InventoryLoadPostfix(Player& __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::Load(ZPackage pkg)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Humanoid::EquipItem(ItemDrop+ItemData item, bool triggerEquipEffects) with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Use_Equipment_in_Water.UseEquipmentInWater::patchEquipItem()
1 postfixes:
* static void BetterArchery.Patches::EquipItemPostfix(Boolean& __result, Humanoid& __instance, ItemDrop+ItemData item, bool triggerEquipEffects)

[Info   :  HarmonyX] Running ILHook manipulator on bool Humanoid::EquipItem(ItemDrop+ItemData item, bool triggerEquipEffects)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Humanoid::UnequipItem(ItemDrop+ItemData item, bool triggerEquipEffects) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Patches::UnequipItemPostfix(Humanoid& __instance, ItemDrop+ItemData item, bool triggerEquipEffects)

[Info   :  HarmonyX] Running ILHook manipulator on void Humanoid::UnequipItem(ItemDrop+ItemData item, bool triggerEquipEffects)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Humanoid::IsItemEquiped(ItemDrop+ItemData item) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Patches::IsItemEquipedPostfix(Boolean& __result, Humanoid& __instance, ItemDrop+ItemData item)

[Info   :  HarmonyX] Running ILHook manipulator on bool Humanoid::IsItemEquiped(ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching float Humanoid::GetEquipmentWeight() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Patches::GetEquipmentWeightPostfix(Single& __result, Humanoid& __instance)

[Info   :  HarmonyX] Running ILHook manipulator on float Humanoid::GetEquipmentWeight()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Humanoid::UnequipAllItems() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Patches::UnequipAllItemsPostfix(Humanoid& __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Humanoid::UnequipAllItems()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching int Humanoid::GetSetCount(string setName) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Patches::GetSetCountPostfix(Int32& __result, Humanoid& __instance, string setName)

[Info   :  HarmonyX] Running ILHook manipulator on int Humanoid::GetSetCount(string setName)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void InventoryGrid::OnLeftClick(UIInputHandler clickHandler) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool BetterArchery.InventoryGrid_OnLeftClick_Patch::Prefix(InventoryGrid __instance, UIInputHandler clickHandler)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGrid::OnLeftClick(UIInputHandler clickHandler)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void InventoryGrid::UpdateGui(Player player, ItemDrop+ItemData dragItem) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.InventoryGrid_UpdateGui_Patch::Postfix(InventoryGrid __instance, Player player, ItemDrop+ItemData dragItem, System.Collections.Generic.List<InventoryGrid+Element> ___m_elements)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGrid::UpdateGui(Player player, ItemDrop+ItemData dragItem)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void InventoryGui::OnSelectedItem(InventoryGrid grid, ItemDrop+ItemData item, Vector2i pos, InventoryGrid+Modifier mod) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool BetterArchery.InventoryGui_OnSelectedItem_Patch::Prefix(InventoryGui __instance, InventoryGrid grid, ItemDrop+ItemData item, Vector2i pos, InventoryGrid+Modifier mod, UnityEngine.GameObject ___m_dragGo, ItemDrop+ItemData ___m_dragItem)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::OnSelectedItem(InventoryGrid grid, ItemDrop+ItemData item, Vector2i pos, InventoryGrid+Modifier mod)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void InventoryGui::UpdateContainer(Player player) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool BetterArchery.InventoryGui_UpdateContainer_Patch::Prefix(InventoryGui __instance, Player player)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::UpdateContainer(Player player)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void InventoryGui::OnDropOutside() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool BetterArchery.InventoryGui_OnDropOutside_Patch::Prefix(UnityEngine.GameObject ___m_dragGo, ItemDrop+ItemData ___m_dragItem)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::OnDropOutside()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void InventoryGui::OnCraftPressed() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void BetterArchery.InventoryGui_OnCraftPressed_Patch::Prefix(InventoryGui __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::OnCraftPressed()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void InventoryGui::UpdateRecipeList(System.Collections.Generic.List<Recipe> recipes) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void BetterArchery.InventoryGui_UpdateRecipeList_Patch::Prefix(InventoryGui __instance, System.Collections.Generic.List<Recipe> recipes)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::UpdateRecipeList(System.Collections.Generic.List<Recipe> recipes)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching bool Inventory::HaveEmptySlot() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool BetterArchery.Inventory_HaveEmptySlot_Patch::Prefix(Inventory __instance, Boolean& __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool Inventory::HaveEmptySlot()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching Vector2i Inventory::FindEmptySlot(bool topFirst) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool BetterArchery.Inventory_FindEmptySlot_Patch::Prefix(Inventory __instance, Vector2i& __result, bool topFirst, int ___m_height, int ___m_width)

[Info   :  HarmonyX] Running ILHook manipulator on Vector2i Inventory::FindEmptySlot(bool topFirst)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 3 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
3 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::CopyOtherDB_Postfix(ObjectDB __instance)
* static void BetterArchery.ObjectDB_CopyOtherDB_Patch::Postfix()
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 2 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
5 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::Awake_Postfix(ObjectDB __instance)
* static void BetterArchery.ObjectDB_Awake_Patch::Postfix()
* static void Jotunn.Managers.PieceManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()
* static void Jotunn.Managers.PieceManager+Patches::InvokeOnPiecesRegistered(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual void Player::Awake() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void BetterArchery.Player_Awake_Patch::Prefix(Player& __instance)

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Player::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Player::OnSpawned() with 1 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void BetterArchery.ModifyOnSpawned::Prefix(Player __instance)
2 postfixes:
* static void Jotunn.Managers.ItemManager+Patches::ReloadKnownRecipes(Player __instance)
* static void Jotunn.Managers.PieceManager+Patches::ReloadKnownRecipes(Player __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::OnSpawned()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Player::LateUpdate() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Player_LateUpdate_Patch::Postfix(Player __instance, UnityEngine.Transform ___m_head, UnityEngine.Rigidbody& ___m_body, VisEquipment& ___m_visEquipment, ItemDrop+ItemData ___m_rightItem, ItemDrop+ItemData ___m_leftItem)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::LateUpdate()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Player::UseHotbarItem(int index) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool BetterArchery.Player_UseHotbarItem_Patch::Prefix(Player __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::UseHotbarItem(int index)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Player::QueueUnequipAction(ItemDrop+ItemData item) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool BetterArchery.Player_QueueUnequipAction_Patch::Prefix(ItemDrop+ItemData item, Player __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::QueueUnequipAction(ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Player::SetControls(UnityEngine.Vector3 movedir, bool attack, bool attackHold, bool secondaryAttack, bool secondaryAttackHold, bool block, bool blockHold, bool jump, bool crouch, bool run, bool autoRun, bool dodge) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void BetterArchery.Player_SetControls_Patch::Prefix(Player __instance, UnityEngine.Vector3& movedir, Boolean& attack, Boolean& attackHold, Boolean& secondaryAttack, Boolean& block, Boolean& blockHold, Boolean& jump, Boolean& crouch, Boolean& run, Boolean& autoRun)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::SetControls(UnityEngine.Vector3 movedir, bool attack, bool attackHold, bool secondaryAttack, bool secondaryAttackHold, bool block, bool blockHold, bool jump, bool crouch, bool run, bool autoRun, bool dodge)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void GameCamera::GetCameraPosition(float dt, UnityEngine.Vector3& pos, UnityEngine.Quaternion& rot) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Player_GameCamera_Patch::Postfix(GameCamera __instance, float dt, UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)

[Info   :  HarmonyX] Running ILHook manipulator on void GameCamera::GetCameraPosition(float dt, UnityEngine.Vector3& pos, UnityEngine.Quaternion& rot)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void GameCamera::UpdateCamera(float dt) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void BetterArchery.Player_GameCamera_UpdateCamera::Prefix(GameCamera __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void GameCamera::UpdateCamera(float dt)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Hud::UpdateCrosshair(Player player, float bowDrawPercentage) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Player_UpdateCrosshair_Patch::Postfix(Hud __instance, Player player, float bowDrawPercentage)

[Info   :  HarmonyX] Running ILHook manipulator on void Hud::UpdateCrosshair(Player player, float bowDrawPercentage)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Player::CreateTombStone() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool BetterArchery.Player_CreateTombStone_Patch::Prefix(Player __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::CreateTombStone()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching virtual void Projectile::Setup(Character owner, UnityEngine.Vector3 velocity, float hitNoise, HitData hitData, ItemDrop+ItemData item, ItemDrop+ItemData ammo) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool BetterArchery.RetrieveArrows::Prefix(Projectile& __instance, Character owner, UnityEngine.Vector3 velocity, float hitNoise, HitData hitData, ItemDrop+ItemData item)

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Projectile::Setup(Character owner, UnityEngine.Vector3 velocity, float hitNoise, HitData hitData, ItemDrop+ItemData item, ItemDrop+ItemData ammo)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Projectile::OnHit(UnityEngine.Collider collider, UnityEngine.Vector3 hitPoint, bool water) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void BetterArchery.Projectile_OnHit_Patch::Prefix(Projectile __instance, UnityEngine.Collider collider, UnityEngine.Vector3 hitPoint, bool water)

[Info   :  HarmonyX] Running ILHook manipulator on void Projectile::OnHit(UnityEngine.Collider collider, UnityEngine.Vector3 hitPoint, bool water)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Attack::FireProjectileBurst() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool BetterArchery.Attack_FireProjectileBurst_Patch::Prefix(Attack& __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Attack::FireProjectileBurst()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Attack::GetProjectileSpawnPoint(UnityEngine.Vector3& spawnPoint, UnityEngine.Vector3& aimDir) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Attack_GetProjectileSpawnPoint_Patch::Postfix(Attack& __instance, UnityEngine.Vector3& spawnPoint, UnityEngine.Vector3& aimDir)

[Info   :  HarmonyX] Running ILHook manipulator on void Attack::GetProjectileSpawnPoint(UnityEngine.Vector3& spawnPoint, UnityEngine.Vector3& aimDir)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual void Humanoid::OnDamaged(HitData hit) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Humanoid_OnDamaged_Patch::Postfix(Humanoid& __instance, HitData hit)

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Humanoid::OnDamaged(HitData hit)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual void Character::OnDamaged(HitData hit) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Character_OnDamaged_Patch::Postfix(Character& __instance, HitData hit)

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Character::OnDamaged(HitData hit)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void TombStone::OnTakeAllSuccess() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BetterArchery.Tombstone+TombStone_OnTakeAllSuccess_Patch::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void TombStone::OnTakeAllSuccess()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 2 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
5 postfixes:
* static void RenegadeVikings.Patches.ZNetScenePatch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.CreatureManager+Patches::FixReferences(ZNetScene __instance)
* static void BetterArchery.ZNetScene_Awake_Patch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :   BepInEx] Loading [OdinShip 0.3.2]
[Info   :  HarmonyX] ### Harmony id=marlthon.OdinShip, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static HarmonyLib.Harmony OdinShip.OdinShipPlugin::‎‬‎‫⁫⁭‫‌⁭⁯⁭​‎‎‍‪⁬‮⁬‌⁬‭⁬⁫‪​‫⁯‌⁫‪​⁭⁬‫⁬‎‮‪‮‮(string ), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\OdinShip\OdinShip.dll
### At 2023-09-17 11.29.07
[Info   :  HarmonyX] ### Harmony id=org.bepinex.helpers.PieceManager, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void PieceManager.PiecePrefabManager::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\OdinShip\OdinShip.dll
### At 2023-09-17 11.29.07
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 2 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::FejdStartup_Awake()
* static void PieceManager.BuildPiece::Patch_FejdStartup()
1 postfixes:
* static void Jotunn.Utils.ModQuery::FejdStartup_Awake_Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 3 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
5 postfixes:
* static void RenegadeVikings.Patches.ZNetScenePatch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.CreatureManager+Patches::FixReferences(ZNetScene __instance)
* static void BetterArchery.ZNetScene_Awake_Patch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 3 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
6 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void RenegadeVikings.Patches.ZNetScenePatch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.CreatureManager+Patches::FixReferences(ZNetScene __instance)
* static void BetterArchery.ZNetScene_Awake_Patch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
4 postfixes:
* static void PieceManager.AdminSyncing::AdminStatusSync(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_Awake(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 2 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
6 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::Awake_Postfix(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_Awake_Patch::Postfix()
* static void Jotunn.Managers.PieceManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()
* static void Jotunn.Managers.PieceManager+Patches::InvokeOnPiecesRegistered(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 3 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
4 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::CopyOtherDB_Postfix(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_CopyOtherDB_Patch::Postfix()
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 2 prefixes, 7 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
7 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::Awake_Postfix(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_Awake_Patch::Postfix()
* static void Jotunn.Managers.PieceManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()
* static void Jotunn.Managers.PieceManager+Patches::InvokeOnPiecesRegistered(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::SetupLanguage(string language) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void Jotunn.Managers.LocalizationManager+Patches::Localization_SetupLanguage(Localization __instance, string language)
* static void PieceManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::SetupLanguage(string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::LoadCSV(UnityEngine.TextAsset file, string language) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void LocalizationManager.Localizer::LoadLocalization(Localization __instance, string language)
* static void PieceManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::LoadCSV(UnityEngine.TextAsset file, string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] ### Harmony id=org.bepinex.helpers.PieceManager, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void PieceManager.MaterialReplacer::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\OdinShip\OdinShip.dll
### At 2023-09-17 11.29.09
[Info   :  HarmonyX] Patching void ZoneSystem::Start() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void PieceManager.MaterialReplacer::ReplaceAllMaterialsWithOriginal()

[Info   :  HarmonyX] Running ILHook manipulator on void ZoneSystem::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] ### Harmony id=org.bepinex.helpers.ItemManager, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void ItemManager.PrefabManager::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\OdinShip\OdinShip.dll
### At 2023-09-17 11.29.09
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 3 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
5 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::CopyOtherDB_Postfix(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_CopyOtherDB_Patch::Postfix()
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 3 prefixes, 7 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
7 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::Awake_Postfix(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_Awake_Patch::Postfix()
* static void Jotunn.Managers.PieceManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()
* static void Jotunn.Managers.PieceManager+Patches::InvokeOnPiecesRegistered(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 4 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
5 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::CopyOtherDB_Postfix(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_CopyOtherDB_Patch::Postfix()
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 4 prefixes, 7 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
7 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::Awake_Postfix(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_Awake_Patch::Postfix()
* static void Jotunn.Managers.PieceManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()
* static void Jotunn.Managers.PieceManager+Patches::InvokeOnPiecesRegistered(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 3 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::FejdStartup_Awake()
* static void PieceManager.BuildPiece::Patch_FejdStartup()
* static void ItemManager.Item::Patch_FejdStartup()
1 postfixes:
* static void Jotunn.Utils.ModQuery::FejdStartup_Awake_Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 3 prefixes, 7 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
7 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void RenegadeVikings.Patches.ZNetScenePatch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.CreatureManager+Patches::FixReferences(ZNetScene __instance)
* static void BetterArchery.ZNetScene_Awake_Patch::Postfix(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 4 prefixes, 7 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
7 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void RenegadeVikings.Patches.ZNetScenePatch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.CreatureManager+Patches::FixReferences(ZNetScene __instance)
* static void BetterArchery.ZNetScene_Awake_Patch::Postfix(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void InventoryGui::UpdateRecipe(Player player, float dt) with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_InventoryGui(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::UpdateRecipe(Player player, float dt)
[Info   :  HarmonyX] Transpiling void InventoryGui::UpdateRecipe(Player player, float dt)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_InventoryGui(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void InventoryGui::SetupRequirementList(int quality, Player player, bool allowedQuality) with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_SetupRequirementList(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructionsEnumerable, System.Reflection.Emit.ILGenerator ilg)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::SetupRequirementList(int quality, Player player, bool allowedQuality)
[Info   :  HarmonyX] Transpiling void InventoryGui::SetupRequirementList(int quality, Player player, bool allowedQuality)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_SetupRequirementList(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructionsEnumerable, System.Reflection.Emit.ILGenerator ilg)
[Info   :  HarmonyX] Patching int Piece+Requirement::GetAmount(int qualityLevel) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool ItemManager.Item::Patch_RequirementGetAmount(Piece+Requirement __instance, int qualityLevel, Int32& __result)

[Info   :  HarmonyX] Running ILHook manipulator on int Piece+Requirement::GetAmount(int qualityLevel)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available) with 1 prefixes, 0 postfixes, 0 transpilers, 1 finalizers
1 prefixes:
* static void ItemManager.Item::Patch_GetAvailableRecipesPrefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Collections.Generic.Dictionary`2[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null],[BepInEx.Configuration.ConfigEntryBase, BepInEx, Version=5.4.21.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]& __state)
1 finalizers:
* static void ItemManager.Item::Patch_GetAvailableRecipesFinalizer(System.Collections.Generic.Dictionary<System.Reflection.Assembly, System.Collections.Generic.Dictionary<Recipe, BepInEx.Configuration.ConfigEntryBase>> __state)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing finalizers
[Info   :  HarmonyX] Patching int Recipe::GetRequiredStationLevel(int quality) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ItemManager.Item::Patch_MaximumRequiredStationLevel(Recipe __instance, Int32& __result, int quality)

[Info   :  HarmonyX] Running ILHook manipulator on int Recipe::GetRequiredStationLevel(int quality)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Smelter::OnAddFuel(Switch sw, Humanoid user, ItemDrop+ItemData item) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ItemManager.Item::Patch_OnAddSmelterInput(ItemDrop+ItemData item, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool Smelter::OnAddFuel(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Smelter::OnAddOre(Switch sw, Humanoid user, ItemDrop+ItemData item) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ItemManager.Item::Patch_OnAddSmelterInput(ItemDrop+ItemData item, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool Smelter::OnAddOre(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching System.Collections.Generic.List<Trader+TradeItem> Trader::GetAvailableItems() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ItemManager.Item::Patch_TraderGetAvailableItems(Trader __instance, System.Collections.Generic.List`1[[Trader+TradeItem, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& __result)

[Info   :  HarmonyX] Running ILHook manipulator on System.Collections.Generic.List<Trader+TradeItem> Trader::GetAvailableItems()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::SetupLanguage(string language) with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void Jotunn.Managers.LocalizationManager+Patches::Localization_SetupLanguage(Localization __instance, string language)
* static void PieceManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)
* static void ItemManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::SetupLanguage(string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::LoadCSV(UnityEngine.TextAsset file, string language) with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void LocalizationManager.Localizer::LoadLocalization(Localization __instance, string language)
* static void PieceManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)
* static void ItemManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::LoadCSV(UnityEngine.TextAsset file, string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Turret::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Namespace.TurretConfig_Patch::Turret_Initialize_Patch(Turret __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Turret::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 5 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void FoodDurationMultiplier.Utils.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
3 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Ship::Awake() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void OdinShip.AnimatorPatch::ShipAwake(Ship __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Ship::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Turret::Awake() with 0 prefixes, 1 postfixes, 1 transpilers, 0 finalizers
1 postfixes:
* static void Namespace.TurretConfig_Patch::Turret_Initialize_Patch(Turret __instance)
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> OdinShip.OdinShipPlugin+Turret_Awake_Patch::FixShip(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> code)

[Info   :  HarmonyX] Running ILHook manipulator on void Turret::Awake()
[Info   :  HarmonyX] Transpiling void Turret::Awake()
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> OdinShip.OdinShipPlugin+Turret_Awake_Patch::FixShip(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> code)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual void Player::Start() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void OdinShip.OdinShipPlugin+uOoOuCcpINQkBMCpmqXdjuaJUBTr::quUkHYXRugSffesXRzXLYTQNWMRb()

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Player::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZRpc::HandlePackage(ZPackage package) with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZRpc::HandlePackage(ZPackage package)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
5 postfixes:
* static void PieceManager.AdminSyncing::AdminStatusSync(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_Awake(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 5 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void FoodDurationMultiplier.Utils.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
4 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Shutdown(bool save) with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Shutdown(bool save)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 9 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
9 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
6 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 10 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
10 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
6 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 6 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void FoodDurationMultiplier.Utils.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
4 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 5 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::ZNetDisconnect_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::ZNetDisconnect_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
6 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::ShowConnectionError_Postfix(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void RenegadeVikings.Utilities.VersionCheck::ShowConnectionError_Postfix(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void Jotunn.Utils.ModCompatibility::FejdStartup_ShowConnectError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :   BepInEx] Loading [Speedy Paths Mod 1.0.8]
[Info   :  HarmonyX] ### Harmony id=harmony-auto-16be2af3-bea8-4f26-9827-78bb031f45e8, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void AuthoritativeConfig.Config::init(BepInEx.BaseUnityPlugin mod, bool defaultBindServerAuthority), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\SpeedyPaths.dll
### At 2023-09-17 11.29.09
[Info   :  HarmonyX] Patching void Game::Start() with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void Jotunn.Managers.GUIManager+Patches::Game_Start(Game __instance)
* static void Jotunn.Managers.NetworkManager+Patches::Game_Start()
* static void AuthoritativeConfig.Config::RegisterSyncConfigRPC()

[Info   :  HarmonyX] Running ILHook manipulator on void Game::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 10 prefixes, 7 postfixes, 0 transpilers, 0 finalizers
10 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
7 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :AuthoritativeConfig_nex.SpeedyPaths] Initialized Server Authoritative Config Manager.
[Info   :  HarmonyX] ### Harmony id=harmony-auto-9543073d-b6a2-48df-bbac-f7c1c1dafd63, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void SpeedyPaths.SpeedyPathsClientMod::Awake(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\SpeedyPaths.dll
### At 2023-09-17 11.29.10
[Info   :  HarmonyX] Patching void Player::FixedUpdate() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void SpeedyPaths.SpeedyPathsClientMod::UpdateModifiers(Player __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::FixedUpdate()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching virtual bool Player::CheckRun(UnityEngine.Vector3 moveDir, float dt) with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void SpeedyPaths.SpeedyPathsClientMod::CheckRunPrefixStaminaMod(Player __instance, Single& __state)
1 postfixes:
* static void SpeedyPaths.SpeedyPathsClientMod::CheckRunPostfixStaminaMod(Player __instance, float __state)

[Info   :  HarmonyX] Running ILHook manipulator on virtual bool Player::CheckRun(UnityEngine.Vector3 moveDir, float dt)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual float Player::GetJogSpeedFactor() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void SpeedyPaths.SpeedyPathsClientMod::JogSpeedPathFactor(Player __instance, Single& __result)

[Info   :  HarmonyX] Running ILHook manipulator on virtual float Player::GetJogSpeedFactor()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual float Player::GetRunSpeedFactor() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void SpeedyPaths.SpeedyPathsClientMod::RunSpeedPathFactor(Player __instance, Single& __result)

[Info   :  HarmonyX] Running ILHook manipulator on virtual float Player::GetRunSpeedFactor()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Hud::UpdateStatusEffects(System.Collections.Generic.List<StatusEffect> statusEffects) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void SpeedyPaths.SpeedyPathsClientMod::UpdatePathIcon(Hud __instance, System.Collections.Generic.List<StatusEffect> statusEffects)

[Info   :  HarmonyX] Running ILHook manipulator on void Hud::UpdateStatusEffects(System.Collections.Generic.List<StatusEffect> statusEffects)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching virtual string StatusEffect::GetIconText() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void SpeedyPaths.SpeedyPathsClientMod::SpeedyPathsStatusEffect_GetIconText(StatusEffect __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on virtual string StatusEffect::GetIconText()
[Info   :  HarmonyX] Writing postfixes
[Info   :   BepInEx] Loading [Display BepInEx Info In-Game 2.0.1]
[Info   :  HarmonyX] ### Harmony id=harmony-auto-a46a349d-17f8-4bf8-869b-c4bb5b7a6961, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void Valheim.DisplayBepInExInfo.DisplayInfoPlugin::Awake(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\Valheim.DisplayBepInExInfo.dll
### At 2023-09-17 11.29.10
[Info   :  HarmonyX] Patching void FejdStartup::Start() with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void SlimAssist.SlimAssist+Start_Patch::Postfix(FejdStartup __instance)
* static void Valheim.DisplayBepInExInfo.DisplayInfoPlugin::OnFejdStartup(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching static void ZNet::SetServer(bool server, bool openServer, bool publicServer, string serverName, string password, World world) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Valheim.DisplayBepInExInfo.DisplayInfoPlugin::OnServerStart(string serverName)

[Info   :  HarmonyX] Running ILHook manipulator on static void ZNet::SetServer(bool server, bool openServer, bool publicServer, string serverName, string password, World world)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual void Terminal::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Valheim.DisplayBepInExInfo.DisplayInfoPlugin::FixConsoleMesh()

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Terminal::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Terminal::UpdateChat() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Valheim.DisplayBepInExInfo.DisplayInfoPlugin::FixConsoleMesh2()

[Info   :  HarmonyX] Running ILHook manipulator on void Terminal::UpdateChat()
[Info   :  HarmonyX] Writing postfixes
[Info   :   BepInEx] Loading [Improved Swimming 1.1.0]
[Info   :  HarmonyX] ### Harmony id=projjm.improvedswimming, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void ImprovedSwimming.ImprovedSwimming::.ctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\ImprovedSwimming.dll
### At 2023-09-17 11.29.10
[Warning:  HarmonyX] AccessTools.DeclaredMethod: Could not find method for type Player and name OnSwiming and parameters 
[Error  : Unity Log] ArgumentException: Undefined target method for patch method static bool ImprovedSwimming.ImprovedSwimming+FixOnSwiming::Prefix(UnityEngine.Vector3 targetVel, float dt, Player __instance)
Stack trace:
HarmonyLib.PatchClassProcessor.PatchWithAttributes (System.Reflection.MethodBase& lastOriginal) (at <474744d65d8e460fa08cd5fd82b5d65f>:0)
HarmonyLib.PatchClassProcessor.Patch () (at <474744d65d8e460fa08cd5fd82b5d65f>:0)
Rethrow as HarmonyException: Patching exception in method null
HarmonyLib.PatchClassProcessor.ReportException (System.Exception exception, System.Reflection.MethodBase original) (at <474744d65d8e460fa08cd5fd82b5d65f>:0)
HarmonyLib.PatchClassProcessor.Patch () (at <474744d65d8e460fa08cd5fd82b5d65f>:0)
HarmonyLib.Harmony.<PatchAll>b__11_0 (System.Type type) (at <474744d65d8e460fa08cd5fd82b5d65f>:0)
HarmonyLib.CollectionExtensions.Do[T] (System.Collections.Generic.IEnumerable`1[T] sequence, System.Action`1[T] action) (at <474744d65d8e460fa08cd5fd82b5d65f>:0)
HarmonyLib.Harmony.PatchAll (System.Reflection.Assembly assembly) (at <474744d65d8e460fa08cd5fd82b5d65f>:0)
HarmonyLib.Harmony.PatchAll () (at <474744d65d8e460fa08cd5fd82b5d65f>:0)
ImprovedSwimming.ImprovedSwimming.Awake () (at <32d6f1c740f24bf6868b9cd0e49fd3ab>:0)
UnityEngine.GameObject:AddComponent(Type)
BepInEx.Bootstrap.Chainloader:Start()
UnityEngine.UI.Image:OnCanvasHierarchyChanged()

[Info   :   BepInEx] Loading [ChaosArmor 12.3.1]
[Info   :  HarmonyX] ### Harmony id=org.bepinex.helpers.ItemManager, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from static void ItemManager.PrefabManager::.cctor(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\AeehyehssReeper-ChaosArmor\ChaosArmor.dll
### At 2023-09-17 11.29.10
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 4 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
6 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::CopyOtherDB_Postfix(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_CopyOtherDB_Patch::Postfix()
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 5 prefixes, 7 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
7 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::Awake_Postfix(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_Awake_Patch::Postfix()
* static void Jotunn.Managers.PieceManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()
* static void Jotunn.Managers.PieceManager+Patches::InvokeOnPiecesRegistered(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 5 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
6 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::CopyOtherDB_Postfix(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_CopyOtherDB_Patch::Postfix()
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 6 prefixes, 7 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
7 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::Awake_Postfix(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_Awake_Patch::Postfix()
* static void Jotunn.Managers.PieceManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()
* static void Jotunn.Managers.PieceManager+Patches::InvokeOnPiecesRegistered(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 4 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::FejdStartup_Awake()
* static void PieceManager.BuildPiece::Patch_FejdStartup()
* static void ItemManager.Item::Patch_FejdStartup()
* static void ItemManager.Item::Patch_FejdStartup()
1 postfixes:
* static void Jotunn.Utils.ModQuery::FejdStartup_Awake_Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 4 prefixes, 8 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
8 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void RenegadeVikings.Patches.ZNetScenePatch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.CreatureManager+Patches::FixReferences(ZNetScene __instance)
* static void BetterArchery.ZNetScene_Awake_Patch::Postfix(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 5 prefixes, 8 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
8 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void RenegadeVikings.Patches.ZNetScenePatch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.CreatureManager+Patches::FixReferences(ZNetScene __instance)
* static void BetterArchery.ZNetScene_Awake_Patch::Postfix(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void InventoryGui::UpdateRecipe(Player player, float dt) with 0 prefixes, 0 postfixes, 2 transpilers, 0 finalizers
2 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_InventoryGui(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_InventoryGui(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::UpdateRecipe(Player player, float dt)
[Info   :  HarmonyX] Transpiling void InventoryGui::UpdateRecipe(Player player, float dt)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_InventoryGui(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_InventoryGui(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available) with 2 prefixes, 0 postfixes, 0 transpilers, 2 finalizers
2 prefixes:
* static void ItemManager.Item::Patch_GetAvailableRecipesPrefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Collections.Generic.Dictionary`2[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null],[BepInEx.Configuration.ConfigEntryBase, BepInEx, Version=5.4.21.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]& __state)
* static void ItemManager.Item::Patch_GetAvailableRecipesPrefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Collections.Generic.Dictionary`2[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null],[BepInEx.Configuration.ConfigEntryBase, BepInEx, Version=5.4.21.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]& __state)
2 finalizers:
* static void ItemManager.Item::Patch_GetAvailableRecipesFinalizer(System.Collections.Generic.Dictionary<System.Reflection.Assembly, System.Collections.Generic.Dictionary<Recipe, BepInEx.Configuration.ConfigEntryBase>> __state)
* static void ItemManager.Item::Patch_GetAvailableRecipesFinalizer(System.Collections.Generic.Dictionary<System.Reflection.Assembly, System.Collections.Generic.Dictionary<Recipe, BepInEx.Configuration.ConfigEntryBase>> __state)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing finalizers
[Info   :  HarmonyX] Patching int Recipe::GetRequiredStationLevel(int quality) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ItemManager.Item::Patch_MaximumRequiredStationLevel(Recipe __instance, Int32& __result, int quality)
* static void ItemManager.Item::Patch_MaximumRequiredStationLevel(Recipe __instance, Int32& __result, int quality)

[Info   :  HarmonyX] Running ILHook manipulator on int Recipe::GetRequiredStationLevel(int quality)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Smelter::OnAddFuel(Switch sw, Humanoid user, ItemDrop+ItemData item) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ItemManager.Item::Patch_OnAddSmelterInput(ItemDrop+ItemData item, bool __result)
* static void ItemManager.Item::Patch_OnAddSmelterInput(ItemDrop+ItemData item, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool Smelter::OnAddFuel(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Smelter::OnAddOre(Switch sw, Humanoid user, ItemDrop+ItemData item) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ItemManager.Item::Patch_OnAddSmelterInput(ItemDrop+ItemData item, bool __result)
* static void ItemManager.Item::Patch_OnAddSmelterInput(ItemDrop+ItemData item, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool Smelter::OnAddOre(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::SetupLanguage(string language) with 0 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
4 postfixes:
* static void Jotunn.Managers.LocalizationManager+Patches::Localization_SetupLanguage(Localization __instance, string language)
* static void PieceManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)
* static void ItemManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)
* static void ItemManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::SetupLanguage(string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::LoadCSV(UnityEngine.TextAsset file, string language) with 0 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
4 postfixes:
* static void LocalizationManager.Localizer::LoadLocalization(Localization __instance, string language)
* static void PieceManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)
* static void ItemManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)
* static void ItemManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::LoadCSV(UnityEngine.TextAsset file, string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] ### Harmony id=harmony-auto-69a0d37e-2457-4d1b-8443-a9d90c1bfcfe, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void ChaosArmor.ReepusDeepusDelmeepusChaosArmor::Awake(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\AeehyehssReeper-ChaosArmor\ChaosArmor.dll
### At 2023-09-17 11.29.10
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 6 prefixes, 8 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
8 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::Awake_Postfix(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_Awake_Patch::Postfix()
* static void Jotunn.Managers.PieceManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()
* static void Jotunn.Managers.PieceManager+Patches::InvokeOnPiecesRegistered(ObjectDB __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ObjectDBPatch::Patch_ObjectDBAwake(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 5 prefixes, 9 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
9 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void RenegadeVikings.Patches.ZNetScenePatch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.CreatureManager+Patches::FixReferences(ZNetScene __instance)
* static void BetterArchery.ZNetScene_Awake_Patch::Postfix(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ZNetScenePatch::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void AudioMan::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+AudioManPatch::Patch_AudioManAwake(AudioMan __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void AudioMan::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Character::RPC_Damage(long sender, HitData hit) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void ChaosArmor.PoiseBois+ReduceDamageTaken::Prefix(Character __instance, HitData hit)

[Info   :  HarmonyX] Running ILHook manipulator on void Character::RPC_Damage(long sender, HitData hit)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZRpc::HandlePackage(ZPackage package) with 4 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZRpc::HandlePackage(ZPackage package)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
6 postfixes:
* static void PieceManager.AdminSyncing::AdminStatusSync(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_Awake(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 6 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void FoodDurationMultiplier.Utils.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
5 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Shutdown(bool save) with 0 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
4 postfixes:
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Shutdown(bool save)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 11 prefixes, 8 postfixes, 0 transpilers, 0 finalizers
11 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
8 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 4 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 4 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 12 prefixes, 8 postfixes, 0 transpilers, 0 finalizers
12 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
8 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 7 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
7 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void FoodDurationMultiplier.Utils.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
5 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 6 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::ZNetDisconnect_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::ZNetDisconnect_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 7 postfixes, 0 transpilers, 0 finalizers
7 postfixes:
* static void FoodDurationMultiplier.Utils.VersionCheck::ShowConnectionError_Postfix(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void RenegadeVikings.Utilities.VersionCheck::ShowConnectionError_Postfix(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void Jotunn.Utils.ModCompatibility::FejdStartup_ShowConnectError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :   BepInEx] Loading [Bears 0.1.4]
[Info   :  HarmonyX] ### Harmony id=harmony-auto-f7ff7848-8794-46e6-a494-8365e3a1a80b, version=2.9.0.0, location=C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\core\0Harmony.dll, env/clr=4.0.30319.42000, platform=Win32NT, ptrsize:runtime/env=8/Bits64, Windows
### Started from void Bears.Plugin::Awake(), location C:\Program Files (x86)\Steam\steamapps\common\Valheim\BepInEx\plugins\Bears\Bears.dll
### At 2023-09-17 11.29.11
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 6 prefixes, 9 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
9 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void RenegadeVikings.Patches.ZNetScenePatch::Postfix(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.CreatureManager+Patches::FixReferences(ZNetScene __instance)
* static void BetterArchery.ZNetScene_Awake_Patch::Postfix(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ZNetScenePatch::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 5 prefixes, 7 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
7 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::CopyOtherDB_Postfix(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_CopyOtherDB_Patch::Postfix()
* static void Bears.Plugin+ObjectDB_CopyOtherDB_Patch::Postfix()
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 6 prefixes, 9 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
9 postfixes:
* static void RenegadeVikings.Patches.ObjectDBPatch::Awake_Postfix(ObjectDB __instance)
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_Awake_Patch::Postfix()
* static void Bears.Plugin+ObjectDB_Awake_Patch::Postfix()
* static void Jotunn.Managers.PieceManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()
* static void Jotunn.Managers.PieceManager+Patches::InvokeOnPiecesRegistered(ObjectDB __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ObjectDBPatch::Patch_ObjectDBAwake(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void SpawnSystem::UpdateSpawnList(System.Collections.Generic.List<SpawnSystem+SpawnData> spawners, DateTime currentTime, bool eventSpawners) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void RenegadeVikings.Patches.SpawnSystemPatch::Prefix(SpawnSystem __instance)
* static void Bears.Plugin+SpawnSystem_Patch::Prefix(SpawnSystem __instance, System.Collections.Generic.List`1[[SpawnSystem+SpawnData, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& spawners)

[Info   :  HarmonyX] Running ILHook manipulator on void SpawnSystem::UpdateSpawnList(System.Collections.Generic.List<SpawnSystem+SpawnData> spawners, DateTime currentTime, bool eventSpawners)
[Info   :  HarmonyX] Writing prefixes
[Info   :   BepInEx] Loading [Vortex Worlds 1.0.1]
[Error  : Unity Log] MissingMethodException: string Utils.GetSaveDataPath()
Stack trace:
UnityEngine.GameObject:AddComponent(Type)
BepInEx.Bootstrap.Chainloader:Start()
UnityEngine.UI.Image:OnCanvasHierarchyChanged()

[Message:   BepInEx] Chainloader startup complete
[Warning: Unity Log] 09/17/2023 11:29:12: Fetching PlatformPrefs 'GuiScale' before loading defaults

[Warning: Unity Log] 09/17/2023 11:29:12: Fetching PlatformPrefs 'GuiScale' before loading defaults

[Info   :  HarmonyX] Patching void VisEquipment::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::VisEqAwakePatch(VisEquipment __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void VisEquipment::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool VisEquipment::SetRightHandEquipped(int hash) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::SetRightHandPatch(VisEquipment __instance, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetRightHandEquipped(int hash)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool VisEquipment::SetLeftHandEquipped(int hash, int variant) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::SetLeftHandPatch(VisEquipment __instance, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetLeftHandEquipped(int hash, int variant)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool VisEquipment::SetChestEquipped(int hash) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::SetChestPatch(VisEquipment __instance, bool __result, int hash)

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetChestEquipped(int hash)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool VisEquipment::SetLegEquipped(int hash) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::SetLegPatch(VisEquipment __instance, bool __result, int hash)

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetLegEquipped(int hash)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool VisEquipment::SetHelmetEquipped(int hash, int hairHash) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::SetHelmetPatch(VisEquipment __instance, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetHelmetEquipped(int hash, int hairHash)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool VisEquipment::SetShoulderEquipped(int hash, int variant) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::SetShoulderPtach(VisEquipment __instance, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetShoulderEquipped(int hash, int variant)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool VisEquipment::SetUtilityEquipped(int hash) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BodypartSystem::SetUtilityPatch(VisEquipment __instance, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetUtilityEquipped(int hash)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching UnityEngine.GameObject VisEquipment::AttachItem(int itemHash, int variant, UnityEngine.Transform joint, bool enableEquipEffects, bool backAttach) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BoneReorder::AttachItemPatch(VisEquipment __instance, UnityEngine.GameObject __result, int itemHash)

[Info   :  HarmonyX] Running ILHook manipulator on UnityEngine.GameObject VisEquipment::AttachItem(int itemHash, int variant, UnityEngine.Transform joint, bool enableEquipEffects, bool backAttach)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching System.Collections.Generic.List<UnityEngine.GameObject> VisEquipment::AttachArmor(int itemHash, int variant) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void BlacksmithTools.BoneReorder::AttachArmorPatch(VisEquipment __instance, System.Collections.Generic.List<UnityEngine.GameObject> __result, int itemHash)

[Info   :  HarmonyX] Running ILHook manipulator on System.Collections.Generic.List<UnityEngine.GameObject> VisEquipment::AttachArmor(int itemHash, int variant)
[Info   :  HarmonyX] Writing postfixes
[Info   : Unity Log] 09/17/2023 11:29:12: Starting to load scene:start

[Info   : Unity Log] 09/17/2023 11:29:12: Using environment steamid 892970

[Info   : Unity Log] 09/17/2023 11:29:12: Using steam APPID:892970

[Info   : Unity Log] 09/17/2023 11:29:12: Authentication:k_ESteamNetworkingAvailability_Attempting

[Debug  :   BepInEx] [UnityInput] Using LegacyInputSystem
[Warning: Unity Log] Only custom filters can be played. Please add a custom filter or an audioclip to the audiosource (Amb_MainMenu).
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 5 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_GetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 5 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_SetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #0 - 'localization' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #1 - 'localization_extra' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #2 - 'heightmap_message' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #3 - 'localization_hildir' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #4 - 'localization_emotes' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #0 - 'localization' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #1 - 'localization_extra' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #2 - 'heightmap_message' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #3 - 'localization_hildir' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #4 - 'localization_emotes' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #0 - 'localization' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #1 - 'localization_extra' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #2 - 'heightmap_message' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #3 - 'localization_hildir' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Loaded localization file #4 - 'localization_emotes' language: 'English'

[Info   : Unity Log] 09/17/2023 11:29:18: Steam initialized, persona:Stanlie

[Info   : Unity Log] 09/17/2023 11:29:18: PlayFab custom ID set to "Steam_76561197995573406"

[Info   : Unity Log] 09/17/2023 11:29:18: Using default prefs

[Info   : Unity Log] 09/17/2023 11:29:18: Valheim version: 0.217.14 (network version 12)

[Info   : Unity Log] 09/17/2023 11:29:18: Worldgenerator version setup:2

[Info   :Jotunn.Managers.CommandManager] Adding 1 commands to the Console
[Info   : Unity Log] 09/17/2023 11:29:18: Render threading mode:MultiThreaded

[Warning: Unity Log] 09/17/2023 11:29:19: Missing audio clip in music respawn

[Info   : Unity Log] 09/17/2023 11:29:19: Checking for installed DLCs

[Info   : Unity Log] 09/17/2023 11:29:19: DLC:beta installed:False

[Debug  :Jotunn.Managers.SynchronizationManager] Gathering config values
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_LeatherQuiver
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_ArrowWoodAnywhere
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_FireArrowTransform
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_PoisonArrowTransform
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_SilverArrowTransform
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_FrostArrowTransform
[Info   : Unity Log] 09/17/2023 11:29:19: Sending PlayFab login request (attempt 1)

[Debug  :  OdinShip] ReadConfigValues called
[Info   : Unity Log] 09/17/2023 11:29:19: Ticket is System.Byte[] of length 369

[Info   : Unity Log] 09/17/2023 11:29:19: Session auth respons callback

[Info   : Unity Log] 09/17/2023 11:29:19: Starting music menu

[Info   : Unity Log] 09/17/2023 11:29:20: PlayFab logged in as "Steam_76561197995573406"

[Info   : Unity Log] 09/17/2023 11:29:20: PlayFab local entity ID is 9D72CE5C0E22C17D

[Info   : Unity Log] 09/17/2023 11:29:23: show character selection

[Info   : Unity Log] 09/17/2023 11:29:24: OnCharacterStart

[Info   : Unity Log] 09/17/2023 11:29:27: Loading main scene

[Info   : Unity Log] 09/17/2023 11:29:27: Steam initialized, persona:Stanlie

[Info   : Unity Log] 09/17/2023 11:29:27: PlayFab custom ID set to "Steam_76561197995573406"

[Info   : Unity Log] 09/17/2023 11:29:27: Using default prefs

[Info   :Jotunn.Managers.CommandManager] Adding 1 commands to the Console
[Info   : Unity Log] 09/17/2023 11:29:27: Loading player profile guldarson

[Info   : Unity Log] 09/17/2023 11:29:27: isModded: True

[Info   : Unity Log] 09/17/2023 11:29:27: Zonesystem Awake 989

[Info   : Unity Log] 09/17/2023 11:29:27: DungeonDB Awake 989

[Info   : Unity Log] 09/17/2023 11:29:27: Steam initialized, persona:Stanlie

[Info   : Unity Log] 09/17/2023 11:29:27: Worldgenerator version setup:2

[Info   : Unity Log] Registered 'blacks7ar.FoodDurationMultiplier ConfigSync' RPC - waiting for incoming connections
[Info   : Unity Log] Registered 'blacks7ar.RenegadeVikings ConfigSync' RPC - waiting for incoming connections
[Info   : Unity Log] Registered 'marlthon.OdinShip ConfigSync' RPC - waiting for incoming connections
[Info   : Unity Log] Registered 'marlthon.OdinShip PieceManager ConfigSync' RPC - waiting for incoming connections
[Info   : Unity Log] Registered 'marlthon.OdinShip ItemManager ConfigSync' RPC - waiting for incoming connections
[Info   : Unity Log] Registered 'ReepusDeepusDelmeepus4902761.ChaosArmor ItemManager ConfigSync' RPC - waiting for incoming connections
[Info   :Jotunn.Managers.PrefabManager] Adding 4 custom prefabs to the ZNetScene
[Debug  :Jotunn.Managers.PrefabManager] Added prefab MinimapOverlayPanel
[Debug  :Jotunn.Managers.PrefabManager] Added prefab ArcaneOrbitSphere
[Debug  :Jotunn.Managers.PrefabManager] Added prefab ColorPicker
[Debug  :Jotunn.Managers.PrefabManager] Added prefab GradientPicker
[Info   : Unity Log] [CustomSlotCreator] Created quiver slot for LeatherQuiver.
[Info   : Unity Log] 09/17/2023 11:29:29: Audioman already exist, destroying self

[Info   : Unity Log] 09/17/2023 11:29:29: Checking for installed DLCs

[Info   : Unity Log] 09/17/2023 11:29:29: DLC:beta installed:False

[Info   :Jotunn.Managers.ItemManager] Adding 10 custom items to the ObjectDB
[Debug  :Jotunn.Managers.PrefabManager] Added prefab Eikthyr_vortex
[Debug  :Jotunn.Managers.ItemManager] Added item Eikthyr_vortex | Token: Eikthyr_vortex
[Debug  :Jotunn.Managers.PrefabManager] Added prefab Eikthyr_summon
[Debug  :Jotunn.Managers.ItemManager] Added item Eikthyr_summon | Token: Eikthyr_summon
[Debug  :Jotunn.Managers.PrefabManager] Added prefab gd_king_summon
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_summon | Token: gd_king_summon
[Debug  :Jotunn.Managers.PrefabManager] Added prefab gd_king_shield
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_shield | Token: gd_king_shield
[Debug  :Jotunn.Managers.PrefabManager] Added prefab gd_king_teleport
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_teleport | Token: gd_king_teleport
[Debug  :Jotunn.Managers.PrefabManager] Added prefab gd_king_heal
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_heal | Token: gd_king_heal
[Debug  :Jotunn.Managers.PrefabManager] Added prefab gd_king_demolish
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_demolish | Token: gd_king_demolish
[Debug  :Jotunn.Managers.PrefabManager] Added prefab bonemass_summon
[Debug  :Jotunn.Managers.ItemManager] Added item bonemass_summon | Token: bonemass_summon
[Debug  :Jotunn.Managers.PrefabManager] Added prefab dragon_summon
[Debug  :Jotunn.Managers.ItemManager] Added item dragon_summon | Token: dragon_summon
[Debug  :Jotunn.Managers.PrefabManager] Added prefab GoblinKing_Summon
[Debug  :Jotunn.Managers.ItemManager] Added item GoblinKing_Summon | Token: GoblinKing_Summon
[Info   :Jotunn.Managers.ItemManager] Adding 3 custom status effects to the ObjectDB
[Debug  :Jotunn.Managers.ItemManager] Added status effect SE_BaseShield
[Debug  :Jotunn.Managers.ItemManager] Added status effect EB_Slow
[Debug  :Jotunn.Managers.ItemManager] Added status effect EB_Trip
[Warning: Unity Log] Custom crafting station '' does not exist
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_LeatherQuiver
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_ArrowWoodAnywhere
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_FireArrowTransform
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_PoisonArrowTransform
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_SilverArrowTransform
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_FrostArrowTransform
[Info   :Jotunn.Managers.NetworkManager] Registering 2 custom RPCs
[Info   :AuthoritativeConfig_nex.SpeedyPaths] Authoritative Config Registered -> AuthoritativeConfig_nex.SpeedyPaths
[Info   : Unity Log] 09/17/2023 11:29:32: Zonesystem Start 989

[Info   : Unity Log] 09/17/2023 11:29:33: Added 3 locations, 0 vegetations, 0 environments, 0 biome env-setups, 0 clutter  from locations_cp1

[Info   : Unity Log] 09/17/2023 11:29:33: Added 1 locations, 0 vegetations, 2 environments, 0 biome env-setups, 0 clutter  from locations_mountaincaves

[Info   : Unity Log] 09/17/2023 11:29:33: Added 27 locations, 25 vegetations, 5 environments, 1 biome env-setups, 3 clutter  from locations_mistlands

[Info   : Unity Log] 09/17/2023 11:29:33: Added 4 locations, 0 vegetations, 1 environments, 0 biome env-setups, 0 clutter  from locations_hildir

[Info   : Unity Log] 09/17/2023 11:29:33: DungeonDB Start 989

[Info   : Unity Log] 09/17/2023 11:29:33: ZRpc timeout set to 30s 

[Info   : Unity Log] 09/17/2023 11:29:33: Load world: HeavilyModded (HeavilyModded)

[Info   : Unity Log] 09/17/2023 11:29:33: Loading 53288 zdos, my sessionID: -231940535, data version: 32

[Info   : Unity Log] 09/17/2023 11:29:33: Creating ZDOs

[Info   : Unity Log] 09/17/2023 11:29:33: Loading in ZDOs

[Error  : Unity Log] 09/17/2023 11:29:33: Exception while loading world /worlds/HeavilyModded.db:System.IO.EndOfStreamException: Unable to read beyond the end of the stream.
  at System.IO.MemoryStream.InternalReadInt32 () [0x00034] in <695d1cc93cca45069c528c15c9fdd749>:0 
  at (wrapper remoting-invoke-with-check) System.IO.MemoryStream.InternalReadInt32()
  at System.IO.BinaryReader.ReadInt32 () [0x00015] in <695d1cc93cca45069c528c15c9fdd749>:0 
  at ZPackage.ReadInt () [0x00000] in <447b19510f604ca3807cd6cce3a7c1ef>:0 
  at ZDO.Load (ZPackage pkg, System.Int32 version) [0x0038c] in <447b19510f604ca3807cd6cce3a7c1ef>:0 
  at ZDOMan.Load (System.IO.BinaryReader reader, System.Int32 version) [0x00146] in <447b19510f604ca3807cd6cce3a7c1ef>:0 
  at ZNet.LoadWorld () [0x000cf] in <447b19510f604ca3807cd6cce3a7c1ef>:0 

[Info   : Unity Log] 09/17/2023 11:29:33: Unloading unused assets

[Info   : Unity Log] 09/17/2023 11:29:33: Generating locations

[Info   : Unity Log] 09/17/2023 11:29:33: Checking for location duplicates

[Warning: Unity Log] 09/17/2023 11:29:43: Failed to place all Mistlands_Giant2, placed 90 out of 100

[Warning: Unity Log] 09/17/2023 11:29:45: Failed to place all Grave1, placed 170 out of 200

[Warning: Unity Log] 09/17/2023 11:29:46: Failed to place all SwampRuin1, placed 27 out of 30

[Warning: Unity Log] 09/17/2023 11:29:47: Failed to place all SwampRuin2, placed 6 out of 30

[Warning: Unity Log] 09/17/2023 11:29:48: Failed to place all FireHole, placed 34 out of 75

[Warning: Unity Log] 09/17/2023 11:29:59: Failed to place all SwampHut3, placed 42 out of 50

[Warning: Unity Log] 09/17/2023 11:30:09: Failed to place all TarPit1, placed 66 out of 100

[Warning: Unity Log] 09/17/2023 11:30:11: Failed to place all TarPit2, placed 10 out of 100

[Warning: Unity Log] 09/17/2023 11:30:15: Failed to place all MountainCave02, placed 145 out of 160

[Info   : Unity Log] 09/17/2023 11:30:17:  Done generating locations, duration:44186.7933 ms

[Error  : Unity Log] 09/17/2023 11:30:17: World db couldn't load correctly, saving has been disabled to prevent .old file from being overwritten.

[Info   : Unity Log] 09/17/2023 11:30:17: Shuting down

[Info   : Unity Log] 09/17/2023 11:30:17: Cloud Save: 14583 bytes. /characters/guldarson.fch.new

[Info   : Unity Log] 09/17/2023 11:30:17: Steam writing file chunks 1 / 1, (14583 bytes)

[Info   : Unity Log] 09/17/2023 11:30:17: Steam Cloud Move: 14583 bytes. /characters/guldarson.fch -> /characters/guldarson.fch.old

[Info   : Unity Log] 09/17/2023 11:30:17: Steam writing file chunks 1 / 1, (14583 bytes)

[Info   : Unity Log] 09/17/2023 11:30:17: Steam Cloud Move: 14583 bytes. /characters/guldarson.fch.new -> /characters/guldarson.fch

[Info   : Unity Log] 09/17/2023 11:30:17: Steam writing file chunks 1 / 1, (14583 bytes)

[Info   : Unity Log] 09/17/2023 11:30:17: Considering autobackup. World time: 0, short time: 7200, long time: 43200, backup count: 4

[Info   : Unity Log] 09/17/2023 11:30:17: No autobackup needed yet...

[Info   : Unity Log] 09/17/2023 11:30:17: ZNet Shutdown

[Warning: Unity Log] 09/17/2023 11:30:17: Skipping world save

[Info   : Unity Log] 09/17/2023 11:30:17: Unloading unused assets

[Info   : Unity Log] 09/17/2023 11:30:17: Sending disconnect msg

[Info   : Unity Log] ZPlayFabMatchmaking::UnregisterServer - unregistering server now. State: Uninitialized
[Error  : Unity Log] 09/17/2023 11:30:17: World load failed, exiting without save. Check backups!

[Info   : Unity Log] 09/17/2023 11:30:17: Starting respawn

[Info   : Unity Log] 09/17/2023 11:30:17: Session auth respons callback

[Info   : Unity Log] 09/17/2023 11:30:23: Unpacking compressed mapdata 8641

[Info   : Unity Log] 09/17/2023 11:30:23: tip:$loadscreen_tip02

[Info   : Unity Log] 09/17/2023 11:30:24: ZNet OnDestroy

[Info   : Unity Log] 09/17/2023 11:30:24: Net scene destroyed

[Warning: Unity Log] Only custom filters can be played. Please add a custom filter or an audioclip to the audiosource (Amb_MainMenu).
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 6 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_GetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_GetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 6 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_SetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_SetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   : Unity Log] 09/17/2023 11:30:25: Steam initialized, persona:Stanlie

[Info   : Unity Log] 09/17/2023 11:30:25: PlayFab custom ID set to "Steam_76561197995573406"

[Info   : Unity Log] 09/17/2023 11:30:25: Using default prefs

[Info   : Unity Log] 09/17/2023 11:30:25: Valheim version: 0.217.14 (network version 12)

[Info   : Unity Log] 09/17/2023 11:30:25: Worldgenerator version setup:2

[Info   :Jotunn.Managers.CommandManager] Adding 1 commands to the Console
[Info   : Unity Log] 09/17/2023 11:30:25: Render threading mode:MultiThreaded

[Info   : Unity Log] 09/17/2023 11:30:25: Audioman already exist, destroying self

[Info   : Unity Log] 09/17/2023 11:30:25: Checking for installed DLCs

[Info   : Unity Log] 09/17/2023 11:30:25: DLC:beta installed:False

[Debug  :Jotunn.Managers.SynchronizationManager] Gathering config values
[Info   :Jotunn.Managers.ItemManager] Adding 10 custom items to the ObjectDB
[Debug  :Jotunn.Managers.ItemManager] Added item Eikthyr_vortex | Token: Eikthyr_vortex
[Debug  :Jotunn.Managers.ItemManager] Added item Eikthyr_summon | Token: Eikthyr_summon
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_summon | Token: gd_king_summon
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_shield | Token: gd_king_shield
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_teleport | Token: gd_king_teleport
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_heal | Token: gd_king_heal
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_demolish | Token: gd_king_demolish
[Debug  :Jotunn.Managers.ItemManager] Added item bonemass_summon | Token: bonemass_summon
[Debug  :Jotunn.Managers.ItemManager] Added item dragon_summon | Token: dragon_summon
[Debug  :Jotunn.Managers.ItemManager] Added item GoblinKing_Summon | Token: GoblinKing_Summon
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_LeatherQuiver
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_ArrowWoodAnywhere
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_FireArrowTransform
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_PoisonArrowTransform
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_SilverArrowTransform
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_FrostArrowTransform
[Debug  :  OdinShip] ReadConfigValues called
[Info   : Unity Log] 09/17/2023 11:30:25: Starting music menu

[Info   : Unity Log] 09/17/2023 11:30:25: Ticket is System.Byte[] of length 369

[Info   : Unity Log] 09/17/2023 11:30:25: Session auth respons callback

[Info   : Unity Log] 09/17/2023 11:30:31: show character selection

[Info   : Unity Log] 09/17/2023 11:30:32: OnCharacterStart

[Info   : Unity Log] 09/17/2023 11:30:41: Cloud Save: 52 bytes. /worlds/ModdedAgain.fwl

[Info   : Unity Log] 09/17/2023 11:30:41: Steam writing file chunks 1 / 1, (52 bytes)

[Info   : Unity Log] 09/17/2023 11:30:41: Considering autobackup. World time: 0, short time: 7200, long time: 43200, backup count: 4

[Info   : Unity Log] 09/17/2023 11:30:41: Creating first autobackup

[Info   : Unity Log] 09/17/2023 11:30:41: Saving backup at: ModdedAgain_backup_auto-20230917113041

[Info   : Unity Log] 09/17/2023 11:30:41: Cloud Copy: 52 bytes. worlds/ModdedAgain.fwl -> worlds/ModdedAgain_backup_auto-20230917113041.fwl

[Info   : Unity Log] 09/17/2023 11:30:41: Steam writing file chunks 1 / 1, (52 bytes)

[Info   : Unity Log] 09/17/2023 11:30:44: Loading main scene

[Info   : Unity Log] 09/17/2023 11:30:44: Steam initialized, persona:Stanlie

[Info   : Unity Log] 09/17/2023 11:30:44: PlayFab custom ID set to "Steam_76561197995573406"

[Info   : Unity Log] 09/17/2023 11:30:44: Using default prefs

[Info   :Jotunn.Managers.CommandManager] Adding 1 commands to the Console
[Info   : Unity Log] 09/17/2023 11:30:44: Loading player profile guldarson

[Info   : Unity Log] 09/17/2023 11:30:44: isModded: True

[Info   : Unity Log] 09/17/2023 11:30:44: Zonesystem Awake 2078

[Info   : Unity Log] 09/17/2023 11:30:44: DungeonDB Awake 2078

[Info   : Unity Log] 09/17/2023 11:30:44: Steam initialized, persona:Stanlie

[Info   : Unity Log] 09/17/2023 11:30:44: Worldgenerator version setup:2

[Info   : Unity Log] Registered 'blacks7ar.FoodDurationMultiplier ConfigSync' RPC - waiting for incoming connections
[Info   : Unity Log] Registered 'blacks7ar.RenegadeVikings ConfigSync' RPC - waiting for incoming connections
[Info   : Unity Log] Registered 'marlthon.OdinShip ConfigSync' RPC - waiting for incoming connections
[Info   : Unity Log] Registered 'marlthon.OdinShip PieceManager ConfigSync' RPC - waiting for incoming connections
[Info   : Unity Log] Registered 'marlthon.OdinShip ItemManager ConfigSync' RPC - waiting for incoming connections
[Info   : Unity Log] Registered 'ReepusDeepusDelmeepus4902761.ChaosArmor ItemManager ConfigSync' RPC - waiting for incoming connections
[Info   :Jotunn.Managers.PrefabManager] Adding 21 custom prefabs to the ZNetScene
[Debug  :Jotunn.Managers.PrefabManager] Added prefab MinimapOverlayPanel
[Debug  :Jotunn.Managers.PrefabManager] Added prefab ArcaneOrbitSphere
[Debug  :Jotunn.Managers.PrefabManager] Added prefab ColorPicker
[Debug  :Jotunn.Managers.PrefabManager] Added prefab GradientPicker
[Debug  :Jotunn.Managers.PrefabManager] Added prefab Eikthyr_vortex
[Debug  :Jotunn.Managers.PrefabManager] Added prefab Eikthyr_summon
[Debug  :Jotunn.Managers.PrefabManager] Added prefab gd_king_summon
[Debug  :Jotunn.Managers.PrefabManager] Added prefab gd_king_shield
[Debug  :Jotunn.Managers.PrefabManager] Added prefab gd_king_teleport
[Debug  :Jotunn.Managers.PrefabManager] Added prefab gd_king_heal
[Debug  :Jotunn.Managers.PrefabManager] Added prefab gd_king_demolish
[Debug  :Jotunn.Managers.PrefabManager] Added prefab bonemass_summon
[Debug  :Jotunn.Managers.PrefabManager] Added prefab dragon_summon
[Debug  :Jotunn.Managers.PrefabManager] Added prefab GoblinKing_Summon
[Debug  :Jotunn.Managers.PrefabManager] Added prefab JotunnKeyHintBaseKey
[Debug  :Jotunn.Managers.PrefabManager] Added prefab JotunnKeyHintBaseRotate
[Debug  :Jotunn.Managers.PrefabManager] Added prefab JotunnKeyHintBaseButton
[Debug  :Jotunn.Managers.PrefabManager] Added prefab JotunnKeyHintBaseTrigger
[Debug  :Jotunn.Managers.PrefabManager] Added prefab JotunnKeyHintBaseShoulder
[Debug  :Jotunn.Managers.PrefabManager] Added prefab JotunnKeyHintBaseStick
[Debug  :Jotunn.Managers.PrefabManager] Added prefab JotunnKeyHintBaseDPad
[Info   : Unity Log] [CustomSlotCreator] Created quiver slot for LeatherQuiver.
[Info   : Unity Log] 09/17/2023 11:30:45: Audioman already exist, destroying self

[Info   : Unity Log] 09/17/2023 11:30:45: Checking for installed DLCs

[Info   : Unity Log] 09/17/2023 11:30:45: DLC:beta installed:False

[Info   :Jotunn.Managers.ItemManager] Adding 10 custom items to the ObjectDB
[Debug  :Jotunn.Managers.ItemManager] Added item Eikthyr_vortex | Token: Eikthyr_vortex
[Debug  :Jotunn.Managers.ItemManager] Added item Eikthyr_summon | Token: Eikthyr_summon
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_summon | Token: gd_king_summon
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_shield | Token: gd_king_shield
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_teleport | Token: gd_king_teleport
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_heal | Token: gd_king_heal
[Debug  :Jotunn.Managers.ItemManager] Added item gd_king_demolish | Token: gd_king_demolish
[Debug  :Jotunn.Managers.ItemManager] Added item bonemass_summon | Token: bonemass_summon
[Debug  :Jotunn.Managers.ItemManager] Added item dragon_summon | Token: dragon_summon
[Debug  :Jotunn.Managers.ItemManager] Added item GoblinKing_Summon | Token: GoblinKing_Summon
[Info   :Jotunn.Managers.ItemManager] Adding 3 custom status effects to the ObjectDB
[Debug  :Jotunn.Managers.ItemManager] Added status effect SE_BaseShield
[Debug  :Jotunn.Managers.ItemManager] Added status effect EB_Slow
[Debug  :Jotunn.Managers.ItemManager] Added status effect EB_Trip
[Warning: Unity Log] Custom crafting station '' does not exist
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_LeatherQuiver
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_ArrowWoodAnywhere
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_FireArrowTransform
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_PoisonArrowTransform
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_SilverArrowTransform
[Info   : Unity Log] [PrefabCreator] Added recipe: Recipe_FrostArrowTransform
[Info   :Jotunn.Managers.NetworkManager] Registering 2 custom RPCs
[Info   :AuthoritativeConfig_nex.SpeedyPaths] Authoritative Config Registered -> AuthoritativeConfig_nex.SpeedyPaths
[Info   : Unity Log] 09/17/2023 11:30:49: Zonesystem Start 2078

[Info   : Unity Log] 09/17/2023 11:30:49: Added 3 locations, 0 vegetations, 0 environments, 0 biome env-setups, 0 clutter  from locations_cp1

[Info   : Unity Log] 09/17/2023 11:30:49: Added 1 locations, 0 vegetations, 2 environments, 0 biome env-setups, 0 clutter  from locations_mountaincaves

[Info   : Unity Log] 09/17/2023 11:30:49: Added 27 locations, 25 vegetations, 5 environments, 1 biome env-setups, 3 clutter  from locations_mistlands

[Info   : Unity Log] 09/17/2023 11:30:49: Added 4 locations, 0 vegetations, 1 environments, 0 biome env-setups, 0 clutter  from locations_hildir

[Info   : Unity Log] 09/17/2023 11:30:49: DungeonDB Start 2078

[Info   : Unity Log] 09/17/2023 11:30:49: ZRpc timeout set to 30s 

[Info   : Unity Log] 09/17/2023 11:30:49: Load world: ModdedAgain (ModdedAgain)

[Info   : Unity Log] 09/17/2023 11:30:49:   missing /worlds/ModdedAgain.db

[Info   : Unity Log] 09/17/2023 11:30:49: Generating locations

[Info   : Unity Log] 09/17/2023 11:30:49: Checking for location duplicates

[Warning: Unity Log] 09/17/2023 11:30:56: Failed to place all SwampRuin2, placed 19 out of 30

[Warning: Unity Log] 09/17/2023 11:31:00: Failed to place all GoblinCamp2, placed 195 out of 200

[Warning: Unity Log] 09/17/2023 11:31:18: Failed to place all Runestone_Mountains, placed 94 out of 100

[Warning: Unity Log] 09/17/2023 11:31:20: Failed to place all TarPit1, placed 62 out of 100

[Warning: Unity Log] 09/17/2023 11:31:21: Failed to place all TarPit2, placed 10 out of 100

[Warning: Unity Log] 09/17/2023 11:31:22: Failed to place all TarPit3, placed 99 out of 100

[Warning: Unity Log] 09/17/2023 11:31:25: Failed to place all MountainCave02, placed 127 out of 160

[Info   : Unity Log] 09/17/2023 11:31:27:  Done generating locations, duration:37493.7931 ms

[Info   : Unity Log] 09/17/2023 11:31:27: Starting respawn

[Info   : Unity Log] 09/17/2023 11:31:27: Session auth respons callback

[Info   : Unity Log] 09/17/2023 11:31:32: tip:$loadscreen_tip20

[Info   : Unity Log] 09/17/2023 11:31:33: Force generating hmap (0.0, 0.0, 0.0)

[Info   : Unity Log] 09/17/2023 11:31:33: Placed locations in zone 0,0  duration 19.0308 ms

[Warning: Unity Log] 09/17/2023 11:31:33: Missing stat for guardian power: 

[Info   : Unity Log] 09/17/2023 11:31:33: Queue unlock msg:$msg_newrecipe:$item_arrow_fire

[Info   : Unity Log] 09/17/2023 11:31:33: Skipping unloading unused assets

[Info   : Unity Log] 09/17/2023 11:31:33: Minimap: Adding unique location (-1.7, 76.3, -7.0)

[Info   : Unity Log] 09/17/2023 11:31:33: Placed locations in zone -1,-2  duration 7.5091 ms

[Info   : Unity Log] 09/17/2023 11:31:33: Placed locations in zone 2,2  duration 2.0024 ms

[Info   : Unity Log] 09/17/2023 11:31:33: Placed locations in zone 2,-4  duration 7.5169 ms

[Info   : Unity Log] 09/17/2023 11:31:33: Placed locations in zone 4,-2  duration 0.9983 ms

[Info   : Unity Log] 09/17/2023 11:31:34: SpawnPrefab StoneSpawner_TheQueen SPAWNING BossStone_TheQueen

[Info   : Unity Log] 09/17/2023 11:31:35: Placed locations in zone -2,-1  duration 0 ms

[Info   : Unity Log] 09/17/2023 11:31:35: Placed locations in zone -1,-1  duration 0 ms

[Info   : Unity Log] 09/17/2023 11:31:35: Placed locations in zone 0,-1  duration 1.0018 ms

[Info   : Unity Log] 09/17/2023 11:31:35: Placed locations in zone -1,0  duration 1.9995 ms

[Info   : Unity Log] 09/17/2023 11:31:35: Placed locations in zone 2,0  duration 19.531 ms

[Info   : Unity Log] 09/17/2023 11:31:36: Placed locations in zone -2,2  duration 11.3922 ms

[Info   : Unity Log] 09/17/2023 11:31:36: Placed locations in zone -1,2  duration 12.109 ms

[Info   : Unity Log] 09/17/2023 11:31:36: Placed locations in zone -4,-4  duration 0 ms

[Info   : Unity Log] 09/17/2023 11:31:37: Placed locations in zone 3,-4  duration 8.5154 ms

[Info   : Unity Log] 09/17/2023 11:31:37: Placed locations in zone 4,-4  duration 8.5232 ms

[Info   : Unity Log] 09/17/2023 11:31:37: Placed locations in zone -4,-3  duration 3.9991 ms

[Info   : Unity Log] 09/17/2023 11:31:37: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:31:37: Placed locations in zone -3,-3  duration 1.0012 ms

[Info   : Unity Log] 09/17/2023 11:31:39: Placed locations in zone 4,-1  duration 0 ms

[Info   : Unity Log] 09/17/2023 11:31:39: Placed locations in zone -4,2  duration 0 ms

[Info   : Unity Log] 09/17/2023 11:31:40: Placed locations in zone 0,4  duration 8.5125 ms

[Info   : Unity Log] 09/17/2023 11:31:40: Placed locations in zone 3,3  duration 0 ms

[Info   : Unity Log] 09/17/2023 11:31:41: Placed locations in zone -3,4  duration 9.6189 ms

[Info   : Unity Log] 09/17/2023 11:31:41: Placed locations in zone -2,4  duration 0 ms

[Info   : Unity Log] 09/17/2023 11:31:41: Placed locations in zone -1,4  duration 2.511 ms

[Info   : Unity Log] 09/17/2023 11:31:41: Placed locations in zone 3,4  duration 3.9988 ms

[Info   : Unity Log] 09/17/2023 11:31:41: Placed locations in zone 4,4  duration 2.0208 ms

[Info   : Unity Log] 09/17/2023 11:31:43: Spawned Deer x 1

[Info   : Unity Log] 09/17/2023 11:31:43: Spawned Deer x 1

[Info   : Unity Log] 09/17/2023 11:31:43: Spawned Greyling x 1

[Info   : Unity Log] 09/17/2023 11:31:43: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:31:53: DiscoverClosestLocation

[Info   : Unity Log] 09/17/2023 11:31:53: Found location of type Eikthyrnir

[Info   : Unity Log] 09/17/2023 11:32:01: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:32:03: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:32:05: Setting selected recipe 2

[Info   : Unity Log] 09/17/2023 11:32:05: Starting music morning

[Info   : Unity Log] 09/17/2023 11:32:07: Setting selected recipe 2

[Info   : Unity Log] 09/17/2023 11:32:11: Spawned BLV_RenegadeVikingT1 x 1

[Info   : Unity Log] 09/17/2023 11:32:13: Valid True

[Info   : Unity Log] 09/17/2023 11:32:13: On death False

[Info   : Unity Log] 09/17/2023 11:32:16: Placed locations in zone 0,-5  duration 11.19 ms

[Info   : Unity Log] 09/17/2023 11:32:16: Placed locations in zone 1,-5  duration 5.4459 ms

[Info   : Unity Log] 09/17/2023 11:32:16: Placed locations in zone 2,-5  duration 0 ms

[Info   : Unity Log] 09/17/2023 11:32:17: Spawned Deer x 2

[Info   : Unity Log] 09/17/2023 11:32:17: Spawned Greyling x 1

[Info   : Unity Log] 09/17/2023 11:32:17: Valid True

[Info   : Unity Log] 09/17/2023 11:32:17: On death False

[Info   : Unity Log] 09/17/2023 11:32:23: Valid True

[Info   : Unity Log] 09/17/2023 11:32:23: On death False

[Info   : Unity Log] 09/17/2023 11:32:39: Starting music meadows

[Info   : Unity Log] 09/17/2023 11:32:39: Resumed music meadows at 0

[Info   : Unity Log] 09/17/2023 11:32:41: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:32:46: Placed locations in zone -5,4  duration 0 ms

[Info   : Unity Log] 09/17/2023 11:32:59: Valid True

[Info   : Unity Log] 09/17/2023 11:32:59: On death False

[Info   : Unity Log] 09/17/2023 11:33:06: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:33:13: Spawned Deer x 1

[Info   : Unity Log] 09/17/2023 11:33:13: Spawned Boar x 2

[Info   : Unity Log] 09/17/2023 11:33:13: Placed locations in zone -6,1  duration 2.001 ms

[Info   : Unity Log] 09/17/2023 11:33:14: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:33:21: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:33:28: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:33:46: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:34:09: Valid True

[Info   : Unity Log] 09/17/2023 11:34:09: On death False

[Info   : Unity Log] 09/17/2023 11:34:38: Spawned BLV_RenegadeVikingT1 x 1

[Info   : Unity Log] 09/17/2023 11:34:41: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:35:09: Spawned Boar x 1

[Info   : Unity Log] 09/17/2023 11:35:38: Vis equip model set to 1

[Info   : Unity Log] 09/17/2023 11:35:38: Spawned BLV_TraderViking x 1

[Info   : Unity Log] 09/17/2023 11:35:38: Disabling PlayerBase  character_trigger

[Info   : Unity Log] 09/17/2023 11:35:41: Placed piece_workbench

[Info   : Unity Log] 09/17/2023 11:35:41: Disabling PlayerBase  character_trigger

[Info   : Unity Log] 09/17/2023 11:35:46: Vis equip model set to 1

[Info   : Unity Log] 09/17/2023 11:35:46: Spawned BLV_NeutralVikings x 1

[Info   : Unity Log] 09/17/2023 11:35:46: Spawned BLV_RenegadeVikingT1 x 1

[Info   : Unity Log] 09/17/2023 11:35:49: Valid True

[Info   : Unity Log] 09/17/2023 11:35:49: On death False

[Info   : Unity Log] 09/17/2023 11:35:50: Placed woodwall

[Info   : Unity Log] 09/17/2023 11:35:51: Placed woodwall

[Info   : Unity Log] 09/17/2023 11:35:55: Placed woodwall

[Info   : Unity Log] 09/17/2023 11:35:57: Placed woodwall

[Info   : Unity Log] 09/17/2023 11:36:02: Placed wood_wall_roof_45

[Info   : Unity Log] 09/17/2023 11:36:08: Placed wood_wall_roof_45

[Info   : Unity Log] 09/17/2023 11:36:16: Placed wood_roof_45

[Info   : Unity Log] 09/17/2023 11:36:18: Placed wood_roof_45

[Info   : Unity Log] 09/17/2023 11:36:19: Setting selected recipe 15

[Info   : Unity Log] 09/17/2023 11:36:20: Update PlayFab entity token

[Info   : Unity Log] 09/17/2023 11:36:23: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:36:26: Queue unlock msg:$msg_newitem:$item_chest_rags

[Info   : Unity Log] 09/17/2023 11:36:26: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:36:27: Item is not in this container

[Info   : Unity Log] 09/17/2023 11:36:27: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:36:30: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:36:31: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:36:33: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:36:36: Setting selected recipe 12

[Info   : Unity Log] 09/17/2023 11:36:38: Queue unlock msg:$msg_newitem:$item_spear_flint

[Info   : Unity Log] 09/17/2023 11:36:38: Setting selected recipe 12

[Info   : Unity Log] 09/17/2023 11:36:39: Setting selected recipe 10

[Info   : Unity Log] 09/17/2023 11:36:42: Queue unlock msg:$msg_newitem:$item_shield_wood

[Info   : Unity Log] 09/17/2023 11:36:42: Setting selected recipe 13

[Info   : Unity Log] 09/17/2023 11:36:44: Item is not in this container

[Info   : Unity Log] 09/17/2023 11:36:44: Setting selected recipe 13

[Info   : Unity Log] 09/17/2023 11:36:46: Setting selected recipe 13

[Info   : Unity Log] 09/17/2023 11:36:52: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:36:57: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:37:02: Spawned BLV_RenegadeVikingT1 x 1

[Info   : Unity Log] 09/17/2023 11:37:13: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:37:20: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:37:21: Spawned Greyling x 1

[Info   : Unity Log] 09/17/2023 11:37:21: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:37:24: Setting selected recipe 4

[Info   : Unity Log] 09/17/2023 11:37:25: Setting selected recipe 3

[Info   : Unity Log] 09/17/2023 11:37:26: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:37:27: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:37:29: Setting selected recipe 4

[Info   : Unity Log] 09/17/2023 11:37:37: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:37:37: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:37:38: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:37:41: Queue unlock msg:$msg_newitem:$item_arrow_fire

[Info   : Unity Log] 09/17/2023 11:37:41: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:37:42: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:37:47: Starting music boss_eikthyr

[Info   : Unity Log] 09/17/2023 11:37:51: Stopped music meadows at 4033278

[Info   : Unity Log] 09/17/2023 11:38:18: Spawned Boar x 1

[Info   : Unity Log] 09/17/2023 11:38:25: Valid True

[Info   : Unity Log] 09/17/2023 11:38:25: On death False

[Info   : Unity Log] 09/17/2023 11:39:04: Valid True

[Info   : Unity Log] 09/17/2023 11:39:04: On death False

[Info   : Unity Log] 09/17/2023 11:40:32: Starting respawn

[Warning: Unity Log] 09/17/2023 11:40:32: Local player destroyed

[Info   : Unity Log] 09/17/2023 11:40:32: tip:$loadscreen_tip02

[Warning: Unity Log] 09/17/2023 11:40:32: Missing stat for guardian power: 

[Info   : Unity Log] 09/17/2023 11:40:32: Skipping unloading unused assets

[Info   : Unity Log] 09/17/2023 11:40:32: Starting music boss_eikthyr

[Info   : Unity Log] 09/17/2023 11:40:36: Stopped music boss_eikthyr at 7291199

[Info   : Unity Log] 09/17/2023 11:40:36: Resumed music boss_eikthyr at 7291199

[Info   : Unity Log] 09/17/2023 11:40:40: Grave should fit in inventory, loot all

[Info   : Unity Log] 09/17/2023 11:40:40: Player 1186301012 wants to takeall from Player_tombstone(Clone)   im: 1186301012

[Info   : Unity Log] 09/17/2023 11:40:41: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:40:44: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:40:50: Spawned Boar x 1

[Info   : Unity Log] 09/17/2023 11:40:52: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:41:27: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:41:30: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:41:58: Spawned BLV_RenegadeVikingT1 x 1

[Info   : Unity Log] 09/17/2023 11:42:04: hit mine rock 2

[Info   : Unity Log] 09/17/2023 11:42:11: hit mine rock 4

[Info   : Unity Log] 09/17/2023 11:42:11: Spawned Boar x 1

[Info   : Unity Log] 09/17/2023 11:42:41: Starting respawn

[Warning: Unity Log] 09/17/2023 11:42:41: Local player destroyed

[Info   : Unity Log] 09/17/2023 11:42:41: tip:$loadscreen_tip04

[Warning: Unity Log] 09/17/2023 11:42:41: Missing stat for guardian power: 

[Info   : Unity Log] 09/17/2023 11:42:41: Skipping unloading unused assets

[Info   : Unity Log] 09/17/2023 11:42:41: Starting music boss_eikthyr

[Info   : Unity Log] 09/17/2023 11:42:44: Grave should fit in inventory, loot all

[Info   : Unity Log] 09/17/2023 11:42:44: Player 1186301012 wants to takeall from Player_tombstone(Clone)   im: 1186301012

[Info   : Unity Log] 09/17/2023 11:42:45: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:42:45: Stopped music boss_eikthyr at 5389371

[Info   : Unity Log] 09/17/2023 11:42:45: Resumed music boss_eikthyr at 5389371

[Info   : Unity Log] 09/17/2023 11:42:47: Valid True

[Info   : Unity Log] 09/17/2023 11:42:47: On death False

[Info   : Unity Log] 09/17/2023 11:43:23: Spawned BLV_RenegadeVikingT1 x 1

[Info   : Unity Log] 09/17/2023 11:43:58: Spawned Greyling x 1

[Info   : Unity Log] 09/17/2023 11:43:58: hit mine rock 4

[Info   : Unity Log] 09/17/2023 11:44:30: hit mine rock 1

[Info   : Unity Log] 09/17/2023 11:44:43: Stopped music boss_eikthyr at 3000209

[Info   : Unity Log] 09/17/2023 11:44:43: Starting music meadows

[Info   : Unity Log] 09/17/2023 11:44:43: Resumed music meadows at 4033278

[Info   : Unity Log] 09/17/2023 11:44:47: Queue unlock msg:$msg_newmaterial:$item_hardantler

[Info   : Unity Log] 09/17/2023 11:44:47: Queue unlock msg:$msg_newrecipe:$item_pickaxe_antler

[Info   : Unity Log] 09/17/2023 11:44:47: Queue unlock msg:$msg_newtrophy:$item_trophy_eikthyr

[Info   : Unity Log] 09/17/2023 11:44:50: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:44:56: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:44:59: Item is not in this container

[Info   : Unity Log] 09/17/2023 11:44:59: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:45:17: Done fading color

[Info   : Unity Log] 09/17/2023 11:45:25: Setting selected recipe 5

[Info   : Unity Log] 09/17/2023 11:45:26: Spawned BLV_RenegadeVikingT1 x 1

[Info   : Unity Log] 09/17/2023 11:45:33: Queue unlock msg:$msg_newmaterial:$item_amberpearl

[Info   : Unity Log] 09/17/2023 11:45:35: Setting selected recipe 16

[Info   : Unity Log] 09/17/2023 11:45:39: Setting selected recipe 9

[Info   : Unity Log] 09/17/2023 11:45:41: Queue unlock msg:$msg_newitem:$item_pickaxe_antler

[Info   : Unity Log] 09/17/2023 11:45:41: Setting selected recipe 12

[Info   : Unity Log] 09/17/2023 11:45:43: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:45:43: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:45:46: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:45:52: Setting selected recipe 0

[Info   : Unity Log] 09/17/2023 11:46:06: Placed locations in zone -4,5  duration 7.0354 ms

[Info   : Unity Log] 09/17/2023 11:46:06: Placed locations in zone -3,5  duration 7.5153 ms

[Info   : Unity Log] 09/17/2023 11:46:06: Placed locations in zone -2,5  duration 0 ms

[Info   : Unity Log] 09/17/2023 11:46:06: Placed locations in zone 0,5  duration 1.0032 ms

[Info   : Unity Log] 09/17/2023 11:46:06: Placed locations in zone 2,5  duration 10.0355 ms

[Info   : Unity Log] 09/17/2023 11:46:08: Spawned Deer x 1

[Info   : Unity Log] 09/17/2023 11:46:08: Spawned Greyling x 1

[Info   : Unity Log] 09/17/2023 11:46:26: Spawned Boar x 1

[Info   : Unity Log] 09/17/2023 11:46:26: Spawned Greyling x 1

[Info   : Unity Log] 09/17/2023 11:46:26: Placed locations in zone 4,5  duration 1.0011 ms

[Info   : Unity Log] 09/17/2023 11:46:38: Uncompressed size 8388735

[Info   : Unity Log] 09/17/2023 11:46:38: Compressed size 8364

[Info   : Unity Log] 09/17/2023 11:46:38: Cloud Save: 23949 bytes. /characters/guldarson.fch.new

[Info   : Unity Log] 09/17/2023 11:46:38: Steam writing file chunks 1 / 1, (23949 bytes)

[Info   : Unity Log] 09/17/2023 11:46:38: Steam Cloud Move: 14583 bytes. /characters/guldarson.fch -> /characters/guldarson.fch.old

[Info   : Unity Log] 09/17/2023 11:46:38: Steam writing file chunks 1 / 1, (14583 bytes)

[Info   : Unity Log] 09/17/2023 11:46:38: Steam Cloud Move: 23949 bytes. /characters/guldarson.fch.new -> /characters/guldarson.fch

[Info   : Unity Log] 09/17/2023 11:46:38: Steam writing file chunks 1 / 1, (23949 bytes)

[Info   : Unity Log] 09/17/2023 11:46:38: Considering autobackup. World time: 903.94, short time: 7200, long time: 43200, backup count: 4

[Info   : Unity Log] 09/17/2023 11:46:38: Skipping backup. World session not long enough.

[Info   : Unity Log] 09/17/2023 11:46:38: PrepareSave: clone done in 2ms

[Info   : Unity Log] 09/17/2023 11:46:38: PrepareSave: ZDOExtraData.PrepareSave done in 14 ms

[Info   : Unity Log] 09/17/2023 11:46:40: Game - OnApplicationQuit

[Info   : Unity Log] 09/17/2023 11:46:40: Shuting down

[Info   : Unity Log] 09/17/2023 11:46:40: Uncompressed size 8388735

[Info   : Unity Log] 09/17/2023 11:46:40: Compressed size 8364

[Info   : Unity Log] 09/17/2023 11:46:40: Cloud Save: 23949 bytes. /characters/guldarson.fch.new

[Info   : Unity Log] 09/17/2023 11:46:40: Steam writing file chunks 1 / 1, (23949 bytes)

[Info   : Unity Log] 09/17/2023 11:46:40: Steam Cloud Move: 23949 bytes. /characters/guldarson.fch -> /characters/guldarson.fch.old

[Info   : Unity Log] 09/17/2023 11:46:40: Steam writing file chunks 1 / 1, (23949 bytes)

[Info   : Unity Log] 09/17/2023 11:46:40: Steam Cloud Move: 23949 bytes. /characters/guldarson.fch.new -> /characters/guldarson.fch

[Info   : Unity Log] 09/17/2023 11:46:40: Steam writing file chunks 1 / 1, (23949 bytes)

[Info   : Unity Log] 09/17/2023 11:46:40: Considering autobackup. World time: 903.94, short time: 7200, long time: 43200, backup count: 4

[Info   : Unity Log] 09/17/2023 11:46:40: Skipping backup. World session not long enough.

[Info   : Unity Log] 09/17/2023 11:46:40: ZNet Shutdown

[Info   : Unity Log] 09/17/2023 11:46:40: PrepareSave: clone done in 1ms

[Info   : Unity Log] 09/17/2023 11:46:40: PrepareSave: ZDOExtraData.PrepareSave done in 3 ms

[Info   : Unity Log] 09/17/2023 11:46:40: Unloading unused assets

[Info   : Unity Log] 09/17/2023 11:46:40: Sending disconnect msg

[Info   : Unity Log] ZPlayFabMatchmaking::UnregisterServer - unregistering server now. State: Uninitialized
[Info   : Unity Log] 09/17/2023 11:46:40: Stopping build thread

[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 7 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
7 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void FoodDurationMultiplier.Utils.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
4 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 6 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
4 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 5 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void RenegadeVikings.Utilities.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
4 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
6 postfixes:
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void RenegadeVikings.Utilities.VersionCheck::ShowConnectionError_Postfix(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void Jotunn.Utils.ModCompatibility::FejdStartup_ShowConnectError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
5 postfixes:
* static void RenegadeVikings.Utilities.VersionCheck::ShowConnectionError_Postfix(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void Jotunn.Utils.ModCompatibility::FejdStartup_ShowConnectError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 5 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void RenegadeVikings.Utilities.VersionCheck::ZNetDisconnect_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 4 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void RenegadeVikings.Utilities.VersionCheck::ZNetDisconnect_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 12 prefixes, 7 postfixes, 0 transpilers, 0 finalizers
12 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
7 postfixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 12 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
12 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool FoodDurationMultiplier.Utils.VersionCheck+ZnetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
6 postfixes:
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 11 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
11 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, FoodDurationMultiplier, Version=1.0.8.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
6 postfixes:
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 10 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
10 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
6 postfixes:
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 9 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
9 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
6 postfixes:
* static void RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Postfix()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Hud::UpdateFood(Player player) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Hud::UpdateFood(Player player)
[Info   :  HarmonyX] Patching bool Player::EatFood(ItemDrop+ItemData item) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool Player::EatFood(ItemDrop+ItemData item)
[Info   :  HarmonyX] Patching void Player::GetTotalFoodValue(Single& hp, Single& stamina, Single& eitr) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Player::GetTotalFoodValue(Single& hp, Single& stamina, Single& eitr)
[Info   :  HarmonyX] Patching void ZRpc::HandlePackage(ZPackage package) with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZRpc::HandlePackage(ZPackage package)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
5 postfixes:
* static void PieceManager.AdminSyncing::AdminStatusSync(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_Awake(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Shutdown(bool save) with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Shutdown(bool save)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 5 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_GetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_GetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 5 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_SetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_SetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 5 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void RenegadeVikings.Utilities.VersionCheck::OnNewConnection_Prefix(ZNetPeer peer, ZNet& __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
3 postfixes:
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 4 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
3 postfixes:
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 3 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
3 postfixes:
* static void PieceManager.RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
4 postfixes:
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void Jotunn.Utils.ModCompatibility::FejdStartup_ShowConnectError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void Jotunn.Utils.ModCompatibility::FejdStartup_ShowConnectError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 9 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
9 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
5 postfixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 9 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
9 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool RenegadeVikings.Utilities.VersionCheck+ZNetRpcPeerInfoPatch::Prefix(ZRpc rpc, ZNet& __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
4 postfixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 8 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
8 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, RenegadeVikings, Version=1.1.6.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
4 postfixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 7 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
7 prefixes:
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
4 postfixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 6 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
4 postfixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Post_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZRpc::HandlePackage(ZPackage package) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZRpc::HandlePackage(ZPackage package)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
4 postfixes:
* static void PieceManager.AdminSyncing::AdminStatusSync(ZNet __instance)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_Awake(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Shutdown(bool save) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Shutdown(bool save)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 4 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_GetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_GetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 4 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_SetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_SetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching bool MonsterAI::UpdateConsumeItem(Humanoid humanoid, float dt) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool MonsterAI::UpdateConsumeItem(Humanoid humanoid, float dt)
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 6 prefixes, 8 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
8 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_Awake_Patch::Postfix()
* static void Bears.Plugin+ObjectDB_Awake_Patch::Postfix()
* static void Jotunn.Managers.PieceManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegistered()
* static void Jotunn.Managers.PieceManager+Patches::InvokeOnPiecesRegistered(ObjectDB __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ObjectDBPatch::Patch_ObjectDBAwake(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 5 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
6 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_CopyOtherDB_Patch::Postfix()
* static void Bears.Plugin+ObjectDB_CopyOtherDB_Patch::Postfix()
* static void Jotunn.Managers.ItemManager+Patches::InvokeOnItemsRegisteredFejd()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching virtual bool Player::TeleportTo(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, bool distantTeleport) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual bool Player::TeleportTo(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, bool distantTeleport)
[Info   :  HarmonyX] Patching void Player::UpdateTeleport(float dt) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Player::UpdateTeleport(float dt)
[Info   :  HarmonyX] Patching System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<RandomEvent, UnityEngine.Vector3>> RandEventSystem::GetPossibleRandomEvents() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<RandomEvent, UnityEngine.Vector3>> RandEventSystem::GetPossibleRandomEvents()
[Info   :  HarmonyX] Patching void SpawnSystem::UpdateSpawnList(System.Collections.Generic.List<SpawnSystem+SpawnData> spawners, DateTime currentTime, bool eventSpawners) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Bears.Plugin+SpawnSystem_Patch::Prefix(SpawnSystem __instance, System.Collections.Generic.List`1[[SpawnSystem+SpawnData, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& spawners)

[Info   :  HarmonyX] Running ILHook manipulator on void SpawnSystem::UpdateSpawnList(System.Collections.Generic.List<SpawnSystem+SpawnData> spawners, DateTime currentTime, bool eventSpawners)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 6 prefixes, 8 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
8 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::RegisterAllToZNetScene()
* static void Jotunn.Managers.CreatureManager+Patches::FixReferences(ZNetScene __instance)
* static void BetterArchery.ZNetScene_Awake_Patch::Postfix(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ZNetScenePatch::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Attack::OnAttackTrigger() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Attack::OnAttackTrigger()
[Info   :  HarmonyX] Patching bool BaseAI::CanUseAttack(ItemDrop+ItemData item) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool BaseAI::CanUseAttack(ItemDrop+ItemData item)
[Info   :  HarmonyX] Patching bool EnemyHud::TestShow(Character c, bool isVisible) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool EnemyHud::TestShow(Character c, bool isVisible)
[Info   :  HarmonyX] Patching void Minimap::UpdateEventPin(float dt) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Minimap::UpdateEventPin(float dt)
[Info   :  HarmonyX] Patching void Attack::DoMeleeAttack() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Attack::DoMeleeAttack()
[Warning:  HarmonyX] UnpatchAll has been called - This will remove ALL HARMONY PATCHES.
[Info   :  HarmonyX] Patching static void Console::SetOut(System.IO.TextWriter newOut) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on static void Console::SetOut(System.IO.TextWriter newOut)
[Info   :  HarmonyX] Patching static System.Reflection.Assembly System.Reflection.Assembly::LoadFile(string path) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on static System.Reflection.Assembly System.Reflection.Assembly::LoadFile(string path)
[Info   :  HarmonyX] Patching static System.Reflection.Assembly System.Reflection.Assembly::LoadFrom(string assemblyFile) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on static System.Reflection.Assembly System.Reflection.Assembly::LoadFrom(string assemblyFile)
[Info   :  HarmonyX] Patching virtual string System.Reflection.Assembly::get_Location() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual string System.Reflection.Assembly::get_Location()
[Info   :  HarmonyX] Patching virtual string System.Reflection.Assembly::get_CodeBase() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual string System.Reflection.Assembly::get_CodeBase()
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 3 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
2 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 3 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
1 postfixes:
* static void ServerSync.ConfigSync+RegisterClientRPCPatch::Postfix(ZNet __instance, ZNetPeer peer)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Utils.ModCompatibility::ZNet_OnNewConnection(ZNet __instance, ZNetPeer peer)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void ServerSync.VersionCheck::RegisterAndCheckVersion(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::OnNewConnection(ZNetPeer peer) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::OnNewConnection(ZNetPeer peer)
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ServerSync.VersionCheck::ShowConnectionError(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::ShowConnectError(ZNet+ConnectionStatus statusOverride)
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void ServerSync.VersionCheck::RemoveDisconnected(ZNetPeer peer, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::Disconnect(ZNetPeer peer) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Disconnect(ZNetPeer peer)
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 6 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
3 postfixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 6 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
2 postfixes:
* static void AuthoritativeConfig.Config::RequestConfigFromServer()
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 6 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
1 postfixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Postfix(System.Collections.Generic.Dictionary<System.Reflection.Assembly, ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket> __state, ZNet __instance, ZRpc rpc)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 6 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static bool Jotunn.Utils.ModCompatibility::ZNet_RPC_PeerInfo(ZNet __instance, ZRpc rpc, ZPackage pkg)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 5 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void Jotunn.Managers.SynchronizationManager+Patches::ZNet_RPC_Pre_PeerInfo(ZNet __instance, ZRpc rpc, Jotunn.Managers.SynchronizationManager+PeerInfoBlockingSocket& __state)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 4 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, OdinShip, Version=0.3.2.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ServerSync.ConfigSync+SendConfigsAfterLogin::Prefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[ServerSync.ConfigSync+SendConfigsAfterLogin+BufferingSocket, ChaosArmor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& __state, ZNet __instance, ZRpc rpc)
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static bool ServerSync.VersionCheck::RPC_PeerInfo(ZRpc rpc, ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_PeerInfo(ZRpc rpc, ZPackage pkg)
[Info   :  HarmonyX] Patching void ZRpc::HandlePackage(ZPackage package) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void ServerSync.ConfigSync+SnatchCurrentlyHandlingRPC::Prefix(ZRpc __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZRpc::HandlePackage(ZPackage package)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZRpc::HandlePackage(ZPackage package) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZRpc::HandlePackage(ZPackage package)
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void PieceManager.AdminSyncing::AdminStatusSync(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ServerSync.ConfigSync+RegisterRPCPatch::Postfix(ZNet __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Awake()
[Info   :  HarmonyX] Patching void ZNet::Shutdown(bool save) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ServerSync.ConfigSync+ResetConfigsOnShutdown::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Shutdown(bool save)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNet::Shutdown(bool save) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::Shutdown(bool save)
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static bool ServerSync.ConfigSync+PreventSavingServerInfo::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_GetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_GetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_GetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_GetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, String& __result)

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Patching string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on string BepInEx.Configuration.ConfigEntryBase::GetSerializedValue()
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static bool ServerSync.ConfigSync+PreventConfigRereadChangingValues::Prefix(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_SetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_SetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_SetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, string value)
* static bool Jotunn.Managers.SynchronizationManager::ConfigEntryBase_SetSerializedValue(BepInEx.Configuration.ConfigEntryBase __instance, string value)

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Patching void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void BepInEx.Configuration.ConfigEntryBase::SetSerializedValue(string value)
[Info   :  HarmonyX] Patching bool Localization::LoadCSV(UnityEngine.TextAsset file, string language) with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void PieceManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)
* static void ItemManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)
* static void ItemManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::LoadCSV(UnityEngine.TextAsset file, string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::LoadCSV(UnityEngine.TextAsset file, string language) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ItemManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)
* static void ItemManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::LoadCSV(UnityEngine.TextAsset file, string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::LoadCSV(UnityEngine.TextAsset file, string language) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ItemManager.LocalizeKey::AddLocalizedKeys(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::LoadCSV(UnityEngine.TextAsset file, string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::LoadCSV(UnityEngine.TextAsset file, string language) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::LoadCSV(UnityEngine.TextAsset file, string language)
[Info   :  HarmonyX] Patching void FejdStartup::Start() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Valheim.DisplayBepInExInfo.DisplayInfoPlugin::OnFejdStartup(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::Start() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Start()
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 6 prefixes, 7 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
7 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_Awake_Patch::Postfix()
* static void Bears.Plugin+ObjectDB_Awake_Patch::Postfix()
* static void Jotunn.Managers.PieceManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void Jotunn.Managers.PieceManager+Patches::InvokeOnPiecesRegistered(ObjectDB __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ObjectDBPatch::Patch_ObjectDBAwake(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 6 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
6 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_Awake_Patch::Postfix()
* static void Bears.Plugin+ObjectDB_Awake_Patch::Postfix()
* static void Jotunn.Managers.PieceManager+Patches::InvokeOnPiecesRegistered(ObjectDB __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ObjectDBPatch::Patch_ObjectDBAwake(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 6 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
5 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_Awake_Patch::Postfix()
* static void Bears.Plugin+ObjectDB_Awake_Patch::Postfix()
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ObjectDBPatch::Patch_ObjectDBAwake(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 6 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
4 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void Bears.Plugin+ObjectDB_Awake_Patch::Postfix()
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ObjectDBPatch::Patch_ObjectDBAwake(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 6 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
3 postfixes:
* static void PieceManager.BuildPiece::Patch_ObjectDBInit(ObjectDB __instance)
* static void Bears.Plugin+ObjectDB_Awake_Patch::Postfix()
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ObjectDBPatch::Patch_ObjectDBAwake(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 6 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
2 postfixes:
* static void Bears.Plugin+ObjectDB_Awake_Patch::Postfix()
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ObjectDBPatch::Patch_ObjectDBAwake(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 6 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
1 postfixes:
* static void Bears.Plugin+ObjectDB_Awake_Patch::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 6 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomData(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 5 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Utils.ModQuery::ObjectDBAwake(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 4 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ObjectDB::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::Awake()
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 5 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
5 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void BetterArchery.ObjectDB_CopyOtherDB_Patch::Postfix()
* static void Bears.Plugin+ObjectDB_CopyOtherDB_Patch::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 5 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
4 postfixes:
* static void PieceManager.PiecePrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Bears.Plugin+ObjectDB_CopyOtherDB_Patch::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 5 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
3 postfixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Bears.Plugin+ObjectDB_CopyOtherDB_Patch::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 5 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
2 postfixes:
* static void ItemManager.PrefabManager::Patch_ObjectDBInit(ObjectDB __instance)
* static void Bears.Plugin+ObjectDB_CopyOtherDB_Patch::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 5 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)
1 postfixes:
* static void Bears.Plugin+ObjectDB_CopyOtherDB_Patch::Postfix()

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 5 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnVanillaObjectsAvailable()
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 4 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void Jotunn.Managers.ItemManager+Patches::RegisterCustomDataFejd(ObjectDB __instance, ObjectDB other)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void Jotunn.Managers.CreatureManager+Patches::InvokeOnVanillaCreaturesAvailable()
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void ItemManager.Item::Patch_ObjectDBInit(ObjectDB __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ObjectDB::CopyOtherDB(ObjectDB other) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ObjectDB::CopyOtherDB(ObjectDB other)
[Info   :  HarmonyX] Patching void SpawnSystem::UpdateSpawnList(System.Collections.Generic.List<SpawnSystem+SpawnData> spawners, DateTime currentTime, bool eventSpawners) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void SpawnSystem::UpdateSpawnList(System.Collections.Generic.List<SpawnSystem+SpawnData> spawners, DateTime currentTime, bool eventSpawners)
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 6 prefixes, 7 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
7 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.CreatureManager+Patches::FixReferences(ZNetScene __instance)
* static void BetterArchery.ZNetScene_Awake_Patch::Postfix(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ZNetScenePatch::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.PrefabManager+Patches::InvokeOnPrefabsRegistered()

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 6 prefixes, 6 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
6 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void Jotunn.Managers.CreatureManager+Patches::FixReferences(ZNetScene __instance)
* static void BetterArchery.ZNetScene_Awake_Patch::Postfix(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ZNetScenePatch::Patch_ZNetSceneAwake(ZNetScene __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 6 prefixes, 5 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
5 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void BetterArchery.ZNetScene_Awake_Patch::Postfix(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ZNetScenePatch::Patch_ZNetSceneAwake(ZNetScene __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 6 prefixes, 4 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
4 postfixes:
* static void PieceManager.PiecePrefabManager::RefFixPatch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ZNetScenePatch::Patch_ZNetSceneAwake(ZNetScene __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 6 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
3 postfixes:
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ZNetScenePatch::Patch_ZNetSceneAwake(ZNetScene __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 6 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
2 postfixes:
* static void ItemManager.Item::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ZNetScenePatch::Patch_ZNetSceneAwake(ZNetScene __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 6 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
1 postfixes:
* static void ChaosArmor.ReepusDeepusDelmeepusChaosArmor+ZNetScenePatch::Patch_ZNetSceneAwake(ZNetScene __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 6 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
6 prefixes:
* static void Jotunn.Managers.UndoManager+Patches::ClearUndoQueuesBefore(ZNetScene __instance)
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 5 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
5 prefixes:
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static bool BetterArchery.ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 4 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void PieceManager.PiecePrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ItemManager.PrefabManager::Patch_ZNetSceneAwake(ZNetScene __instance)
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Bears.Plugin+ZNetScene_Awake_Patch::Prefix(ZNetScene __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void ZNetScene::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Awake()
[Info   :  HarmonyX] Patching void ZNet::RPC_ClientHandshake(ZRpc rpc, bool needPassword, string serverPasswordSalt) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_ClientHandshake(ZRpc rpc, bool needPassword, string serverPasswordSalt)
[Info   :  HarmonyX] Patching void ZNet::RPC_ServerHandshake(ZRpc rpc) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::RPC_ServerHandshake(ZRpc rpc)
[Info   :  HarmonyX] Patching void ZNet::SendPeerInfo(ZRpc rpc, string password) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZNet::SendPeerInfo(ZRpc rpc, string password)
[Info   :  HarmonyX] Patching void FejdStartup::SetupGui() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void Jotunn.Managers.GUIManager+Patches::FejdStartup_SetupGui(FejdStartup __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::SetupGui()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void FejdStartup::SetupGui() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::SetupGui()
[Info   :  HarmonyX] Patching System.Collections.Generic.List<string> Localization::LoadLanguages() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on System.Collections.Generic.List<string> Localization::LoadLanguages()
[Info   :  HarmonyX] Patching bool Localization::SetupLanguage(string language) with 0 prefixes, 3 postfixes, 0 transpilers, 0 finalizers
3 postfixes:
* static void PieceManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)
* static void ItemManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)
* static void ItemManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::SetupLanguage(string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::SetupLanguage(string language) with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void ItemManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)
* static void ItemManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::SetupLanguage(string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::SetupLanguage(string language) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ItemManager.LocalizationCache::LocalizationPostfix(Localization __instance, string language)

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::SetupLanguage(string language)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Localization::SetupLanguage(string language) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool Localization::SetupLanguage(string language)
[Info   :  HarmonyX] Patching virtual void Console::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Console::Awake()
[Info   :  HarmonyX] Patching System.Collections.Generic.List<string> Terminal+ConsoleCommand::GetTabOptions() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on System.Collections.Generic.List<string> Terminal+ConsoleCommand::GetTabOptions()
[Info   :  HarmonyX] Patching void ZInput::Load() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZInput::Load()
[Info   :  HarmonyX] Patching static bool ZInput::GetButtonDown(string name) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on static bool ZInput::GetButtonDown(string name)
[Info   :  HarmonyX] Patching static bool ZInput::GetButton(string name) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on static bool ZInput::GetButton(string name)
[Info   :  HarmonyX] Patching static bool ZInput::GetButtonUp(string name) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on static bool ZInput::GetButtonUp(string name)
[Info   :  HarmonyX] Patching void Skills::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Skills::Awake()
[Info   :  HarmonyX] Patching static bool Skills::IsSkillValid(Skills+SkillType type) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on static bool Skills::IsSkillValid(Skills+SkillType type)
[Info   :  HarmonyX] Patching Skills+Skill Skills::GetSkill(Skills+SkillType skillType) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on Skills+Skill Skills::GetSkill(Skills+SkillType skillType)
[Info   :  HarmonyX] Patching void Skills::CheatRaiseSkill(string name, float value, bool showMessage) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Skills::CheatRaiseSkill(string name, float value, bool showMessage)
[Info   :  HarmonyX] Patching void Skills::CheatResetSkill(string name) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Skills::CheatResetSkill(string name)
[Info   :  HarmonyX] Patching static void Terminal::InitTerminal() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on static void Terminal::InitTerminal()
[Info   :  HarmonyX] Patching void Player::OnSpawned() with 1 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void BetterArchery.ModifyOnSpawned::Prefix(Player __instance)
1 postfixes:
* static void Jotunn.Managers.PieceManager+Patches::ReloadKnownRecipes(Player __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::OnSpawned()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Player::OnSpawned() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void BetterArchery.ModifyOnSpawned::Prefix(Player __instance)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::OnSpawned()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void Player::OnSpawned() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Player::OnSpawned()
[Info   :  HarmonyX] Patching void PieceTable::NextCategory() with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::NextCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::NextCategory()
[Info   :  HarmonyX] Transpiling void PieceTable::NextCategory()
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::NextCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void PieceTable::NextCategory() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::NextCategory()
[Info   :  HarmonyX] Patching void PieceTable::PrevCategory() with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::PrevCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::PrevCategory()
[Info   :  HarmonyX] Transpiling void PieceTable::PrevCategory()
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::PrevCategory_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void PieceTable::PrevCategory() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::PrevCategory()
[Info   :  HarmonyX] Patching virtual void Player::SetPlaceMode(PieceTable buildPieces) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Player::SetPlaceMode(PieceTable buildPieces)
[Info   :  HarmonyX] Patching void Hud::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Hud::Awake()
[Info   :  HarmonyX] Patching void Hud::LateUpdate() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Hud::LateUpdate()
[Info   :  HarmonyX] Patching void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost) with 1 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 prefixes:
* static void Jotunn.Managers.PieceManager+Patches::PieceTable_UpdateAvailable_Prefix(PieceTable __instance)
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::UpdateAvailable_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost)
[Info   :  HarmonyX] Transpiling void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::UpdateAvailable_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost) with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::UpdateAvailable_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost)
[Info   :  HarmonyX] Transpiling void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> Jotunn.Managers.PieceManager+Patches::UpdateAvailable_Transpiler(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::UpdateAvailable(System.Collections.Generic.HashSet<string> knownRecipies, Player player, bool hideUnavailable, bool noPlacementCost)
[Info   :  HarmonyX] Patching void PieceTable::SetCategory(int index) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void PieceTable::SetCategory(int index)
[Info   :  HarmonyX] Patching static Array Enum::GetValues(Type enumType) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on static Array Enum::GetValues(Type enumType)
[Info   :  HarmonyX] Patching static string[] Enum::GetNames(Type enumType) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on static string[] Enum::GetNames(Type enumType)
[Info   :  HarmonyX] Patching void SpawnSystem::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void SpawnSystem::Awake()
[Info   :  HarmonyX] Patching void LevelEffects::SetupLevelVisualization(int level) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void LevelEffects::SetupLevelVisualization(int level)
[Info   :  HarmonyX] Patching void ZoneSystem::SetupLocations() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZoneSystem::SetupLocations()
[Info   :  HarmonyX] Patching void ClutterSystem::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ClutterSystem::Awake()
[Info   :  HarmonyX] Patching bool PlayerController::TakeInput(bool look) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool PlayerController::TakeInput(bool look)
[Info   :  HarmonyX] Patching virtual bool Player::TakeInput() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual bool Player::TakeInput()
[Info   :  HarmonyX] Patching static bool TextInput::IsVisible() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on static bool TextInput::IsVisible()
[Info   :  HarmonyX] Patching void InventoryGui::Update() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::Update()
[Info   :  HarmonyX] Patching void Game::Start() with 0 prefixes, 2 postfixes, 0 transpilers, 0 finalizers
2 postfixes:
* static void Jotunn.Managers.NetworkManager+Patches::Game_Start()
* static void AuthoritativeConfig.Config::RegisterSyncConfigRPC()

[Info   :  HarmonyX] Running ILHook manipulator on void Game::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Game::Start() with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void AuthoritativeConfig.Config::RegisterSyncConfigRPC()

[Info   :  HarmonyX] Running ILHook manipulator on void Game::Start()
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching void Game::Start() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Game::Start()
[Info   :  HarmonyX] Patching void KeyHints::Start() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void KeyHints::Start()
[Info   :  HarmonyX] Patching void KeyHints::UpdateHints() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void KeyHints::UpdateHints()
[Info   :  HarmonyX] Patching void ZInput::Save() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZInput::Save()
[Info   :  HarmonyX] Patching void SyncedList::Load() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void SyncedList::Load()
[Info   :  HarmonyX] Patching void SyncedList::Save() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void SyncedList::Save()
[Info   :  HarmonyX] Patching static bool Menu::IsVisible() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on static bool Menu::IsVisible()
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 4 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
4 prefixes:
* static void Jotunn.Managers.SynchronizationManager+Patches::FejdStartup_Awake()
* static void PieceManager.BuildPiece::Patch_FejdStartup()
* static void ItemManager.Item::Patch_FejdStartup()
* static void ItemManager.Item::Patch_FejdStartup()

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 3 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
3 prefixes:
* static void PieceManager.BuildPiece::Patch_FejdStartup()
* static void ItemManager.Item::Patch_FejdStartup()
* static void ItemManager.Item::Patch_FejdStartup()

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 2 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
2 prefixes:
* static void ItemManager.Item::Patch_FejdStartup()
* static void ItemManager.Item::Patch_FejdStartup()

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void ItemManager.Item::Patch_FejdStartup()

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching void FejdStartup::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void FejdStartup::Awake()
[Info   :  HarmonyX] Patching void Minimap::Start() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Minimap::Start()
[Info   :  HarmonyX] Patching void Minimap::LoadMapData() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Minimap::LoadMapData()
[Info   :  HarmonyX] Patching void Minimap::CenterMap(UnityEngine.Vector3 centerPoint) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Minimap::CenterMap(UnityEngine.Vector3 centerPoint)
[Info   :  HarmonyX] Patching void Minimap::OnDestroy() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Minimap::OnDestroy()
[Info   :  HarmonyX] Patching void UnityEngine.Texture2D::Apply(bool updateMipmaps, bool makeNoLongerReadable) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void UnityEngine.Texture2D::Apply(bool updateMipmaps, bool makeNoLongerReadable)
[Info   :  HarmonyX] Patching void ZNetScene::Shutdown() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::Shutdown()
[Info   :  HarmonyX] Patching void ZNetScene::OnDestroy() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZNetScene::OnDestroy()
[Info   :  HarmonyX] Patching bool Character::IsSwimming() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool Character::IsSwimming()
[Info   :  HarmonyX] Patching bool Humanoid::EquipItem(ItemDrop+ItemData item, bool triggerEquipEffects) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void Use_Equipment_in_Water.UseEquipmentInWater::patchEquipItem()

[Info   :  HarmonyX] Running ILHook manipulator on bool Humanoid::EquipItem(ItemDrop+ItemData item, bool triggerEquipEffects)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching bool Humanoid::EquipItem(ItemDrop+ItemData item, bool triggerEquipEffects) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool Humanoid::EquipItem(ItemDrop+ItemData item, bool triggerEquipEffects)
[Info   :  HarmonyX] Patching void Humanoid::UpdateEquipment(float dt) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Humanoid::UpdateEquipment(float dt)
[Info   :  HarmonyX] Patching virtual void Terminal::InputText() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Terminal::InputText()
[Info   :  HarmonyX] Patching bool ItemDrop+ItemData::IsEquipable() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool ItemDrop+ItemData::IsEquipable()
[Info   :  HarmonyX] Patching virtual void Humanoid::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Humanoid::Awake()
[Info   :  HarmonyX] Patching void Player::Load(ZPackage pkg) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Player::Load(ZPackage pkg)
[Info   :  HarmonyX] Patching void Humanoid::UnequipItem(ItemDrop+ItemData item, bool triggerEquipEffects) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Humanoid::UnequipItem(ItemDrop+ItemData item, bool triggerEquipEffects)
[Info   :  HarmonyX] Patching bool Humanoid::IsItemEquiped(ItemDrop+ItemData item) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool Humanoid::IsItemEquiped(ItemDrop+ItemData item)
[Info   :  HarmonyX] Patching float Humanoid::GetEquipmentWeight() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on float Humanoid::GetEquipmentWeight()
[Info   :  HarmonyX] Patching void Humanoid::UnequipAllItems() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Humanoid::UnequipAllItems()
[Info   :  HarmonyX] Patching int Humanoid::GetSetCount(string setName) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on int Humanoid::GetSetCount(string setName)
[Info   :  HarmonyX] Patching void InventoryGrid::OnLeftClick(UIInputHandler clickHandler) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGrid::OnLeftClick(UIInputHandler clickHandler)
[Info   :  HarmonyX] Patching void InventoryGrid::UpdateGui(Player player, ItemDrop+ItemData dragItem) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGrid::UpdateGui(Player player, ItemDrop+ItemData dragItem)
[Info   :  HarmonyX] Patching void InventoryGui::OnSelectedItem(InventoryGrid grid, ItemDrop+ItemData item, Vector2i pos, InventoryGrid+Modifier mod) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::OnSelectedItem(InventoryGrid grid, ItemDrop+ItemData item, Vector2i pos, InventoryGrid+Modifier mod)
[Info   :  HarmonyX] Patching void InventoryGui::UpdateContainer(Player player) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::UpdateContainer(Player player)
[Info   :  HarmonyX] Patching void InventoryGui::OnDropOutside() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::OnDropOutside()
[Info   :  HarmonyX] Patching void InventoryGui::OnCraftPressed() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::OnCraftPressed()
[Info   :  HarmonyX] Patching void InventoryGui::UpdateRecipeList(System.Collections.Generic.List<Recipe> recipes) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::UpdateRecipeList(System.Collections.Generic.List<Recipe> recipes)
[Info   :  HarmonyX] Patching bool Inventory::HaveEmptySlot() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool Inventory::HaveEmptySlot()
[Info   :  HarmonyX] Patching Vector2i Inventory::FindEmptySlot(bool topFirst) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on Vector2i Inventory::FindEmptySlot(bool topFirst)
[Info   :  HarmonyX] Patching virtual void Player::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Player::Awake()
[Info   :  HarmonyX] Patching void Player::LateUpdate() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Player::LateUpdate()
[Info   :  HarmonyX] Patching void Player::UseHotbarItem(int index) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Player::UseHotbarItem(int index)
[Info   :  HarmonyX] Patching void Player::QueueUnequipAction(ItemDrop+ItemData item) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Player::QueueUnequipAction(ItemDrop+ItemData item)
[Info   :  HarmonyX] Patching void Player::SetControls(UnityEngine.Vector3 movedir, bool attack, bool attackHold, bool secondaryAttack, bool secondaryAttackHold, bool block, bool blockHold, bool jump, bool crouch, bool run, bool autoRun, bool dodge) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Player::SetControls(UnityEngine.Vector3 movedir, bool attack, bool attackHold, bool secondaryAttack, bool secondaryAttackHold, bool block, bool blockHold, bool jump, bool crouch, bool run, bool autoRun, bool dodge)
[Info   :  HarmonyX] Patching void GameCamera::GetCameraPosition(float dt, UnityEngine.Vector3& pos, UnityEngine.Quaternion& rot) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void GameCamera::GetCameraPosition(float dt, UnityEngine.Vector3& pos, UnityEngine.Quaternion& rot)
[Info   :  HarmonyX] Patching void GameCamera::UpdateCamera(float dt) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void GameCamera::UpdateCamera(float dt)
[Info   :  HarmonyX] Patching void Hud::UpdateCrosshair(Player player, float bowDrawPercentage) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Hud::UpdateCrosshair(Player player, float bowDrawPercentage)
[Info   :  HarmonyX] Patching void Player::CreateTombStone() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Player::CreateTombStone()
[Info   :  HarmonyX] Patching virtual void Projectile::Setup(Character owner, UnityEngine.Vector3 velocity, float hitNoise, HitData hitData, ItemDrop+ItemData item, ItemDrop+ItemData ammo) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Projectile::Setup(Character owner, UnityEngine.Vector3 velocity, float hitNoise, HitData hitData, ItemDrop+ItemData item, ItemDrop+ItemData ammo)
[Info   :  HarmonyX] Patching void Projectile::OnHit(UnityEngine.Collider collider, UnityEngine.Vector3 hitPoint, bool water) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Projectile::OnHit(UnityEngine.Collider collider, UnityEngine.Vector3 hitPoint, bool water)
[Info   :  HarmonyX] Patching void Attack::FireProjectileBurst() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Attack::FireProjectileBurst()
[Info   :  HarmonyX] Patching void Attack::GetProjectileSpawnPoint(UnityEngine.Vector3& spawnPoint, UnityEngine.Vector3& aimDir) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Attack::GetProjectileSpawnPoint(UnityEngine.Vector3& spawnPoint, UnityEngine.Vector3& aimDir)
[Info   :  HarmonyX] Patching virtual void Humanoid::OnDamaged(HitData hit) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Humanoid::OnDamaged(HitData hit)
[Info   :  HarmonyX] Patching virtual void Character::OnDamaged(HitData hit) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Character::OnDamaged(HitData hit)
[Info   :  HarmonyX] Patching void TombStone::OnTakeAllSuccess() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void TombStone::OnTakeAllSuccess()
[Info   :  HarmonyX] Patching void ZoneSystem::Start() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void ZoneSystem::Start()
[Info   :  HarmonyX] Patching void InventoryGui::UpdateRecipe(Player player, float dt) with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_InventoryGui(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::UpdateRecipe(Player player, float dt)
[Info   :  HarmonyX] Transpiling void InventoryGui::UpdateRecipe(Player player, float dt)
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> ItemManager.Item::Transpile_InventoryGui(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> instructions)
[Info   :  HarmonyX] Patching void InventoryGui::UpdateRecipe(Player player, float dt) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::UpdateRecipe(Player player, float dt)
[Info   :  HarmonyX] Patching void InventoryGui::SetupRequirementList(int quality, Player player, bool allowedQuality) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void InventoryGui::SetupRequirementList(int quality, Player player, bool allowedQuality)
[Info   :  HarmonyX] Patching int Piece+Requirement::GetAmount(int qualityLevel) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on int Piece+Requirement::GetAmount(int qualityLevel)
[Info   :  HarmonyX] Patching void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available) with 1 prefixes, 0 postfixes, 0 transpilers, 2 finalizers
1 prefixes:
* static void ItemManager.Item::Patch_GetAvailableRecipesPrefix(System.Collections.Generic.Dictionary`2[[System.Reflection.Assembly, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Collections.Generic.Dictionary`2[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null],[BepInEx.Configuration.ConfigEntryBase, BepInEx, Version=5.4.21.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]& __state)
2 finalizers:
* static void ItemManager.Item::Patch_GetAvailableRecipesFinalizer(System.Collections.Generic.Dictionary<System.Reflection.Assembly, System.Collections.Generic.Dictionary<Recipe, BepInEx.Configuration.ConfigEntryBase>> __state)
* static void ItemManager.Item::Patch_GetAvailableRecipesFinalizer(System.Collections.Generic.Dictionary<System.Reflection.Assembly, System.Collections.Generic.Dictionary<Recipe, BepInEx.Configuration.ConfigEntryBase>> __state)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Writing finalizers
[Info   :  HarmonyX] Patching void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available) with 0 prefixes, 0 postfixes, 0 transpilers, 2 finalizers
2 finalizers:
* static void ItemManager.Item::Patch_GetAvailableRecipesFinalizer(System.Collections.Generic.Dictionary<System.Reflection.Assembly, System.Collections.Generic.Dictionary<Recipe, BepInEx.Configuration.ConfigEntryBase>> __state)
* static void ItemManager.Item::Patch_GetAvailableRecipesFinalizer(System.Collections.Generic.Dictionary<System.Reflection.Assembly, System.Collections.Generic.Dictionary<Recipe, BepInEx.Configuration.ConfigEntryBase>> __state)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available)
[Info   :  HarmonyX] Writing finalizers
[Info   :  HarmonyX] Patching void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available) with 0 prefixes, 0 postfixes, 0 transpilers, 1 finalizers
1 finalizers:
* static void ItemManager.Item::Patch_GetAvailableRecipesFinalizer(System.Collections.Generic.Dictionary<System.Reflection.Assembly, System.Collections.Generic.Dictionary<Recipe, BepInEx.Configuration.ConfigEntryBase>> __state)

[Info   :  HarmonyX] Running ILHook manipulator on void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available)
[Info   :  HarmonyX] Writing finalizers
[Info   :  HarmonyX] Patching void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Player::GetAvailableRecipes(System.Collections.Generic.List`1[[Recipe, assembly_valheim, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]& available)
[Info   :  HarmonyX] Patching int Recipe::GetRequiredStationLevel(int quality) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ItemManager.Item::Patch_MaximumRequiredStationLevel(Recipe __instance, Int32& __result, int quality)

[Info   :  HarmonyX] Running ILHook manipulator on int Recipe::GetRequiredStationLevel(int quality)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching int Recipe::GetRequiredStationLevel(int quality) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on int Recipe::GetRequiredStationLevel(int quality)
[Info   :  HarmonyX] Patching bool Smelter::OnAddFuel(Switch sw, Humanoid user, ItemDrop+ItemData item) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ItemManager.Item::Patch_OnAddSmelterInput(ItemDrop+ItemData item, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool Smelter::OnAddFuel(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Smelter::OnAddFuel(Switch sw, Humanoid user, ItemDrop+ItemData item) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool Smelter::OnAddFuel(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Patching bool Smelter::OnAddOre(Switch sw, Humanoid user, ItemDrop+ItemData item) with 0 prefixes, 1 postfixes, 0 transpilers, 0 finalizers
1 postfixes:
* static void ItemManager.Item::Patch_OnAddSmelterInput(ItemDrop+ItemData item, bool __result)

[Info   :  HarmonyX] Running ILHook manipulator on bool Smelter::OnAddOre(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Writing postfixes
[Info   :  HarmonyX] Patching bool Smelter::OnAddOre(Switch sw, Humanoid user, ItemDrop+ItemData item) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool Smelter::OnAddOre(Switch sw, Humanoid user, ItemDrop+ItemData item)
[Info   :  HarmonyX] Patching System.Collections.Generic.List<Trader+TradeItem> Trader::GetAvailableItems() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on System.Collections.Generic.List<Trader+TradeItem> Trader::GetAvailableItems()
[Info   :  HarmonyX] Patching void Turret::Awake() with 0 prefixes, 0 postfixes, 1 transpilers, 0 finalizers
1 transpilers:
* static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> OdinShip.OdinShipPlugin+Turret_Awake_Patch::FixShip(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> code)

[Info   :  HarmonyX] Running ILHook manipulator on void Turret::Awake()
[Info   :  HarmonyX] Transpiling void Turret::Awake()
[Info   :  HarmonyX] Running transpiler static System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> OdinShip.OdinShipPlugin+Turret_Awake_Patch::FixShip(System.Collections.Generic.IEnumerable<HarmonyLib.CodeInstruction> code)
[Info   :  HarmonyX] Patching void Turret::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Turret::Awake()
[Info   :  HarmonyX] Patching void Ship::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Ship::Awake()
[Info   :  HarmonyX] Patching virtual void Player::Start() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Player::Start()
[Info   :  HarmonyX] Patching void Player::FixedUpdate() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Player::FixedUpdate()
[Info   :  HarmonyX] Patching virtual bool Player::CheckRun(UnityEngine.Vector3 moveDir, float dt) with 1 prefixes, 0 postfixes, 0 transpilers, 0 finalizers
1 prefixes:
* static void SpeedyPaths.SpeedyPathsClientMod::CheckRunPrefixStaminaMod(Player __instance, Single& __state)

[Info   :  HarmonyX] Running ILHook manipulator on virtual bool Player::CheckRun(UnityEngine.Vector3 moveDir, float dt)
[Info   :  HarmonyX] Writing prefixes
[Info   :  HarmonyX] Patching virtual bool Player::CheckRun(UnityEngine.Vector3 moveDir, float dt) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual bool Player::CheckRun(UnityEngine.Vector3 moveDir, float dt)
[Info   :  HarmonyX] Patching virtual float Player::GetJogSpeedFactor() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual float Player::GetJogSpeedFactor()
[Info   :  HarmonyX] Patching virtual float Player::GetRunSpeedFactor() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual float Player::GetRunSpeedFactor()
[Info   :  HarmonyX] Patching void Hud::UpdateStatusEffects(System.Collections.Generic.List<StatusEffect> statusEffects) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Hud::UpdateStatusEffects(System.Collections.Generic.List<StatusEffect> statusEffects)
[Info   :  HarmonyX] Patching virtual string StatusEffect::GetIconText() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual string StatusEffect::GetIconText()
[Info   :  HarmonyX] Patching static void ZNet::SetServer(bool server, bool openServer, bool publicServer, string serverName, string password, World world) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on static void ZNet::SetServer(bool server, bool openServer, bool publicServer, string serverName, string password, World world)
[Info   :  HarmonyX] Patching virtual void Terminal::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on virtual void Terminal::Awake()
[Info   :  HarmonyX] Patching void Terminal::UpdateChat() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Terminal::UpdateChat()
[Info   :  HarmonyX] Patching void AudioMan::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void AudioMan::Awake()
[Info   :  HarmonyX] Patching void Character::RPC_Damage(long sender, HitData hit) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void Character::RPC_Damage(long sender, HitData hit)
[Info   :  HarmonyX] Patching void VisEquipment::Awake() with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on void VisEquipment::Awake()
[Info   :  HarmonyX] Patching bool VisEquipment::SetRightHandEquipped(int hash) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetRightHandEquipped(int hash)
[Info   :  HarmonyX] Patching bool VisEquipment::SetLeftHandEquipped(int hash, int variant) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetLeftHandEquipped(int hash, int variant)
[Info   :  HarmonyX] Patching bool VisEquipment::SetChestEquipped(int hash) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetChestEquipped(int hash)
[Info   :  HarmonyX] Patching bool VisEquipment::SetLegEquipped(int hash) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetLegEquipped(int hash)
[Info   :  HarmonyX] Patching bool VisEquipment::SetHelmetEquipped(int hash, int hairHash) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetHelmetEquipped(int hash, int hairHash)
[Info   :  HarmonyX] Patching bool VisEquipment::SetShoulderEquipped(int hash, int variant) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetShoulderEquipped(int hash, int variant)
[Info   :  HarmonyX] Patching bool VisEquipment::SetUtilityEquipped(int hash) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on bool VisEquipment::SetUtilityEquipped(int hash)
[Info   :  HarmonyX] Patching UnityEngine.GameObject VisEquipment::AttachItem(int itemHash, int variant, UnityEngine.Transform joint, bool enableEquipEffects, bool backAttach) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on UnityEngine.GameObject VisEquipment::AttachItem(int itemHash, int variant, UnityEngine.Transform joint, bool enableEquipEffects, bool backAttach)
[Info   :  HarmonyX] Patching System.Collections.Generic.List<UnityEngine.GameObject> VisEquipment::AttachArmor(int itemHash, int variant) with 0 prefixes, 0 postfixes, 0 transpilers, 0 finalizers

[Info   :  HarmonyX] Running ILHook manipulator on System.Collections.Generic.List<UnityEngine.GameObject> VisEquipment::AttachArmor(int itemHash, int variant)
[Warning: Unity Log] 09/17/2023 11:46:45: Local player destroyed

